// CONSULTA E RESERVA DE ARMÁRIOS
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstring>
#include <stdlib.h>
#include <stdio.h>
#include <cstdlib>
#include <windows.h>


#define ALUNO   20
#define FUNCIONARIO 10
#define ARMARIOS 5
#define CURSO 5
using namespace std;
HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
COORD CursorPosition;

void gotoxy(int x, int y){
  CursorPosition.X = x; // Locates column
  CursorPosition.Y = y; // Locates Row
  SetConsoleCursorPosition(console,CursorPosition); // Sets position for next thing to be printed
}

typedef struct {
    int dataInicio, dataFim, ano;
} AlunoCurso;

typedef struct {
    char nome[30], email[40];
    int matricula, fone, turmaSerie;
} Aluno;

typedef struct {
    int codigo, dataRec, dataDev;
} Reserva;

typedef struct {
    char nome[30], usuario[10], email[40];
    int matricula, senha, fone;
} Funcionario;

typedef struct {
    bool disponivel, estado;
    int numero;

} Armario;

typedef struct {
    char nome[25];
    int codigo;
} Curso;

Funcionario funcionariosCadastrados[FUNCIONARIO];
int totalFuncionarios = 0;

Aluno alunosCadastrados[ALUNO];
int totalAlunos = 0;

Armario armarios[ARMARIOS];
AlunoCurso AluCurso[ALUNO];
Reserva Res[ARMARIOS];
Curso Cursos[CURSO];


void salvarArmariosEmArquivo();
void salvarArmariosEmArquivo(){
    FILE* arquivo = fopen("armarios.txt", "w");

    if (arquivo != NULL) {
        for (int i = 0; i < ARMARIOS; i++) {
            fprintf(arquivo, "%d %d %d\n",
                    armarios[i].numero,
                    armarios[i].disponivel,
                    armarios[i].estado);
        }
        fclose(arquivo);
    } else {
        cout << "Erro ao abrir o arquivo de armários." << endl;
    }
}

void inicializarArmarios();
void inicializarArmarios(){
    FILE* arquivo = fopen("armarios.txt", "r");

    if (arquivo == NULL) {
        // Arquivo não existe, então inicialize os armários
        for (int i = 0; i < ARMARIOS; i++) {
            armarios[i].numero = i + 1; // Número do armário
            armarios[i].disponivel = true; // Armário inicialmente disponível
            armarios[i].estado = true; // Estado inicial do armário
        }

        // Salve as informações dos armários em um arquivo
        salvarArmariosEmArquivo();
    } else {

        // Arquivo existe, então carregue as informações dos armários
        for (int i = 0; i < ARMARIOS; i++) {
            if (fscanf(arquivo, "%d %d %d\n",
                        &armarios[i].numero,
                        &armarios[i].disponivel,
                        &armarios[i].estado) == EOF) {
                break;
            }
        }
        fclose(arquivo);
    }
}

void carregarArmariosDeArquivo();
void carregarArmariosDeArquivo(){


    FILE* arquivo = fopen("armarios.txt", "r");

    if (arquivo != NULL) {
        for (int i = 0; i < ARMARIOS; i++) {
            fprintf(arquivo, "%d %d %d\n",
                    armarios[i].numero,
                    armarios[i].disponivel,
                    armarios[i].estado);
        }
        fclose(arquivo);
    } else {
        cout << "Erro ao abrir o arquivo de armários." << endl;
    }
}

void exibirTodosArmarios();
void exibirTodosArmarios(){
    carregarArmariosDeArquivo();
    system("cls");
    gotoxy(1, 1);
    cout << "----------------------------------------------------------------";
    gotoxy(1, 2);
    cout << "============================ARMARIOS============================";
    gotoxy(1, 3);
    cout << "----------------------------------------------------------------";
    gotoxy(7, 4);
    cout << "Numero";
    gotoxy(20, 4);
    cout << "Dispinibilidade";
    gotoxy(45, 4);
    cout << "Estado";
    cout << "\n";
    cout << "-----------------------------------------------------------------";

    for (int i = 0; i < ARMARIOS; i++) {
        gotoxy(8, 6 + i);
        printf("%d", i +1);
        if(armarios[i].disponivel==true){
            gotoxy(23, 6 + i);
            cout << "Disponivel";
        }else{
            gotoxy(23, 6 + i);
            cout << "Indisponivel";

            }

        if(armarios[i].estado==true){
             gotoxy(47, 6 + i);
             printf("Bom");
        }else{
            gotoxy(47, 6 + i);
             printf("Ruim");

            }

    }
    cout << "\n";
    cout << "=================================================================\n";
    cout << "\nArmários Cadastrados: "<< ARMARIOS <<"\n\n";
    cout << "[1] = Bom/Disponível\n";
    cout << "[0] = Mau/Indisponível\n\n";
    system("pause");

}

void editArmario();
void editArmario(){
    int armarioEdit, novoEstado, novaDisponibilidade;

    cout << "\n*********************  EDITAR DADOS DE ARMÁRIO ************************ \n";
    cout << "Informe o número do armário que deseja editar.\n";
    cout << "Número: ";
    cin >> armarioEdit;

    for (int i = 0; i < ARMARIOS; i++) {
        if (armarios[i].numero == armarioEdit) {
        cout << "\n\nArmário escolhido: " << armarios[i].numero << endl;

        cout << "\n\n[1] = Bom/Disponível\n";
        cout << "[0] = Mau/Indisponível";

        cout << "\n\nDigite o novo estado: ";
        cin >> novoEstado;

        switch(novoEstado){
            case 0:
                armarios[i].estado = false;
                system("pause");
                break;

            case 1:
                armarios[i].estado = true;
                system("pause");
                break;

            default:
                cout << "Opção não disponível.";
        }

        cout << "\nDigite a nova disponibilidade: ";
        cin >> novaDisponibilidade;

        switch(novaDisponibilidade){
            case 0:
                armarios[i].disponivel = false;
                system("pause");
                break;

            case 1:
                armarios[i].disponivel = true;
                system("pause");
                break;

            default:
                cout << "Opção não disponível.";
        }

        system("cls");
        cout << "\n\nArmário editado com sucesso!\n" << endl;
        system("pause");
        break;
        }
    }
salvarArmariosEmArquivo();
}


void salvarAlunosEmArquivo();
void salvarAlunosEmArquivo(){
    FILE* arquivoAluno = fopen("alunos.txt", "w");

    for (int i = 0; i < totalAlunos; i++){
        fprintf(arquivoAluno, "%s %d %s %d %d \n",
            alunosCadastrados[i].nome,
            alunosCadastrados[i].matricula,
            alunosCadastrados[i].email,
            alunosCadastrados[i].fone,
            alunosCadastrados[i].turmaSerie);
    }
    fclose(arquivoAluno);
}

void carregarAlunosDeArquivo();
void carregarAlunosDeArquivo(){
    FILE* arquivoAluno = fopen("alunos.txt", "r");
    totalAlunos = 0;

    if (arquivoAluno == NULL){
        cout << "\nNada para ser lido.\n";
        system("pause");
    }
    while (fscanf(arquivoAluno, "%s %d %s %d %d\n",
                  alunosCadastrados[totalAlunos].nome,
                  &alunosCadastrados[totalAlunos].matricula,
                  alunosCadastrados[totalAlunos].email,
                  &alunosCadastrados[totalAlunos].fone,
                  &alunosCadastrados[totalAlunos].turmaSerie) != EOF)
    {
    totalAlunos++;
    }
    fclose(arquivoAluno);
}

void exibirTodosAlunos();
void exibirTodosAlunos(){
    carregarAlunosDeArquivo();
    system("cls");
    gotoxy(1, 1);
    cout << "--------------------------------------------------------------------------------------------------------------------";
    gotoxy(1, 2);
    cout << "=============================================ALUNOS=================================================================";
    gotoxy(1, 3);
    cout << "--------------------------------------------------------------------------------------------------------------------";
    gotoxy(7, 4);
    cout << "Nome";
    gotoxy(30, 4);
    cout << "Email";
    gotoxy(65, 4);
    cout << "Matricula";
    gotoxy(85, 4);
    cout << "Contato";
    gotoxy(105, 4);
    cout << "Turma/Serie";
    cout << "\n";
    cout << "---------------------------------------------------------------------------------------------------------------------";

    for (int i = 0; i < totalAlunos; i++) {
        gotoxy(6, 6 + i);
        printf("%s", alunosCadastrados[i].nome);
        gotoxy(28, 6 + i);
        printf("%s", alunosCadastrados[i].email);
        gotoxy(66, 6 + i);
        printf("%d", alunosCadastrados[i].matricula);
        gotoxy(86, 6 + i);
        printf("%d", alunosCadastrados[i].fone);
        gotoxy(105, 6 + i);
        printf("%d", alunosCadastrados[i].turmaSerie);

    }
    cout << "\n";
    cout << "=====================================================================================================================\n";
    system("pause");
}

void cadastrarAluno();
void cadastrarAluno(){
    Aluno novoAluno;

    system("cls"); // Limpa a tela
    cin.ignore(); // Limpa o buffer do teclado
    cout << "\n*********** CADASTRO DE ALUNO ***********\n\n";
    cout << "Nome: ";
    cin.getline(novoAluno.nome, 50);


    bool matriculaExistenteAluno;
    do{
        cout << "Matrícula: ";
        cin >> novoAluno.matricula;
        matriculaExistenteAluno = false;

        for (int i = 0; i < totalAlunos; i++){
            if (novoAluno.matricula == alunosCadastrados[i].matricula){
                matriculaExistenteAluno = true;
                cout << "Matrícula já está em uso. Escolha outra matrícula." << endl;
            break;
            }
        }
    }
    while (matriculaExistenteAluno);

    cout << "Email: ";
    cin >> novoAluno.email;
    cout << "Telefone: ";
    cin >> novoAluno.fone;
    cout << "Turma/Série: ";
    cin >> novoAluno.turmaSerie;

                                                    // Adiciona o novo aluno ao array e incrementa o contador
    alunosCadastrados[totalAlunos] = novoAluno;
    totalAlunos++;

    system("cls");
    cout << "\nAluno cadastrado com sucesso.\n";
    system("pause");
    salvarAlunosEmArquivo();
}

void editAluno();
void editAluno(){
    int alunoEdit;

    exibirTodosAlunos();

    cout << "\n*********************  EDITAR DADOS DE ALUNO ************************ \n";
    cout << "Informe a matrícula do aluno que deseja editar.\n";
    cout << "\nMatrícula: ";
    cin >> alunoEdit;

    for (int i = 0; i < totalAlunos; i++) {
        if (alunosCadastrados[i].matricula == alunoEdit) {
        cout << "Aluno escolhido: " << alunosCadastrados[i].nome << endl;

        cout << "Digite o novo nome: ";
        cin.ignore();
        cin.getline(alunosCadastrados[i].nome, 50);
        cout << "Digite o novo email: ";
        cin >> alunosCadastrados[i].email;
        cout << "Digite a nova matrícula: ";
        cin >> alunosCadastrados[i].matricula;
        cout << "Digite o novo telefone: ";
        cin >> alunosCadastrados[i].fone;
        cout << "Digite a nova Turma/Série: ";
        cin >> alunosCadastrados[i].turmaSerie;

        cout << "Aluno editado com sucesso!" << endl;
        break;
        }
    }
    system("pause");
salvarAlunosEmArquivo();
}

void deletAluno();
void deletAluno(){
    int alunoDel, novoTotalAlunos = 0;

    exibirTodosAlunos();

    cout << "\n*********************  DELETAR CADASTRO DE ALUNO ************************ \n";
    cout << "Informe a matrícula do aluno que deseja deletar.\n";
    cout << "\nMatrícula: ";
    cin >> alunoDel;

    // Criar um novo array temporário
    Aluno novosAlunosCadastrados[ALUNO];
    for (int i = 0; i < totalAlunos; i++) {
        if (alunoDel != alunosCadastrados[i].matricula) {
            novosAlunosCadastrados[novoTotalAlunos] = alunosCadastrados[i];
            novoTotalAlunos++;
        }
    }

    if (novoTotalAlunos < totalAlunos) {
        totalAlunos = novoTotalAlunos;              // Exclusão bem-sucedida, atualizar o array principal
        for (int i = 0; i < totalAlunos; i++) {
            alunosCadastrados[i] = novosAlunosCadastrados[i];
        }
        system("cls");
        salvarAlunosEmArquivo();
        cout << "\nCadastro deletado.\n";
        system("pause");
    } else {
        system("cls");
        cout << "\nAluno não encontrado para exclusão.\n";
        system("pause");
    }
}


void salvarFuncionariosEmArquivo();
void salvarFuncionariosEmArquivo(){
    FILE* arquivoFuncionario = fopen("funcionarios.txt", "w");

    for (int i = 0; i < totalFuncionarios; i++){
        fprintf(arquivoFuncionario, "%s %d %s %d %s %d \n",
            funcionariosCadastrados[i].nome,
            funcionariosCadastrados[i].matricula,
            funcionariosCadastrados[i].email,
            funcionariosCadastrados[i].fone,
            funcionariosCadastrados[i].usuario,
            funcionariosCadastrados[i].senha);
    }
    fclose(arquivoFuncionario);
}

void carregarFuncionariosDeArquivo();
void carregarFuncionariosDeArquivo(){
    FILE* arquivoFuncionario = fopen("funcionarios.txt", "r");
    totalFuncionarios = 0;

    if (arquivoFuncionario == NULL){
        cout << "\nNada para ser lido.\n";
        system("pause");
    }
    while (fscanf(arquivoFuncionario, "%s %d %s %d %s %d\n",
                  funcionariosCadastrados[totalFuncionarios].nome,
                  &funcionariosCadastrados[totalFuncionarios].matricula,
                  funcionariosCadastrados[totalFuncionarios].email,
                  &funcionariosCadastrados[totalFuncionarios].fone,
                  funcionariosCadastrados[totalFuncionarios].usuario,
                  &funcionariosCadastrados[totalFuncionarios].senha) != EOF)
    {
    totalFuncionarios++;
    }
    fclose(arquivoFuncionario);
}

void exibirTodosFuncionarios();
void exibirTodosFuncionarios(){
    carregarFuncionariosDeArquivo(); // Carregar funcionários apenas uma vez no início.
    system("cls");
    gotoxy(1, 1);
    cout << "---------------------------------------------------------------------------------------------------------------";
    gotoxy(1, 2);
    cout << "================================================FUNCIONARIO====================================================";
    gotoxy(1, 3);
    cout << "---------------------------------------------------------------------------------------------------------------";
    gotoxy(7, 4);
    cout << "Nome";
    gotoxy(45, 4);
    cout << "Email";
    gotoxy(65, 4);
    cout << "Matricula";
    gotoxy(85, 4);
    cout << "Contato";
    gotoxy(105, 4);
    cout << "Usuario";
    gotoxy(1, 5);
    cout << "---------------------------------------------------------------------------------------------------------------";

    for (int i = 0; i < totalFuncionarios; i++) {
        gotoxy(6, 6 + i);
        printf("%s", funcionariosCadastrados[i].nome);
        gotoxy(36, 6 + i);
        printf("%s", funcionariosCadastrados[i].email);
        gotoxy(66, 6 + i);
        printf("%d", funcionariosCadastrados[i].matricula);
        gotoxy(86, 6 + i);
        printf("%d", funcionariosCadastrados[i].fone);
        gotoxy(106, 6 + i);
        printf("%s", funcionariosCadastrados[i].usuario);

    }
    cout << "\n";
    cout << "================================================================================================================\n";
    system("pause");
}

void cadastrarFuncionario();
void cadastrarFuncionario(){
    Funcionario novoFuncionario;
    system("cls"); // Limpa a tela
    cout << "\n*********** CADASTRO DE FUNCIONÁRIO ***********\n\n";
    cout << "Nome: ";
    cin.ignore(); // Limpa o buffer do teclado
    cin.getline(novoFuncionario.nome, 50);

    bool matriculaExistente;
    do{
        cout << "Matrícula: ";
        cin >> novoFuncionario.matricula;
        matriculaExistente = false;

        for (int i = 0; i < totalFuncionarios; i++){
            if (novoFuncionario.matricula == funcionariosCadastrados[i].matricula){
                matriculaExistente = true;
                cout << "Matrícula já está em uso. Escolha outra matrícula." << endl;
            break;
            }
        }
    }
    while (matriculaExistente);

    cout << "Email: ";
    cin >> novoFuncionario.email;
    cout << "Telefone: ";
    cin >> novoFuncionario.fone;

    bool usuarioExistente;
    do{
        cout << "Usuário: ";
        cin >> novoFuncionario.usuario;
        usuarioExistente = false;

        for (int i = 0; i < totalFuncionarios; i++){
            if (strcmp(novoFuncionario.usuario, funcionariosCadastrados[i].usuario) == 0){
                usuarioExistente = true;
                cout << "Usuário já está em uso. Escolha outro usuário." << endl;
            break;
            }
        }
    }
    while (usuarioExistente);

    cout << "Senha: ";
    cin >> novoFuncionario.senha;

    funcionariosCadastrados[totalFuncionarios] = novoFuncionario;   // Adiciona o novo funcionário ao array e incrementa o contador
    totalFuncionarios++;

    system("cls");
    cout << "\nFuncionário cadastrado com sucesso.\n";
    system("pause");
    salvarFuncionariosEmArquivo();
}

void editFuncionario();
void editFuncionario(){
    int funEdit;

    exibirTodosFuncionarios();

    cout << "\n*********************  EDITAR DADOS DE FUNCIONÁRIO ************************ \n";
    cout << "Informe a matrícula do funcionário que deseja editar.\n";
    cout << "\nMatrícula: ";
    cin >> funEdit;

    for (int i = 0; i < totalFuncionarios; i++) {
        if (funcionariosCadastrados[i].matricula == funEdit) {
        cout << "Funcionário escolhido: " << funcionariosCadastrados[i].nome << endl;

        cout << "Digite o novo nome: ";
        cin.ignore();
        cin.getline(funcionariosCadastrados[i].nome, 50);
        cout << "Digite o novo email: ";
        cin >> funcionariosCadastrados[i].email;
        cout << "Digite a nova matrícula: ";
        cin >> funcionariosCadastrados[i].matricula;
        cout << "Digite o novo telefone: ";
        cin >> funcionariosCadastrados[i].fone;

        cout << "Funcionário editado com sucesso!" << endl;
        break; // Sair do loop ao encontrar o funcionário
        }
    }
    system("pause");
salvarFuncionariosEmArquivo();
}

void deletFuncionario();
void deletFuncionario(){
    int funDel, novoTotalFuncionarios = 0;

    exibirTodosFuncionarios();

    cout << "\n*********************  DELETAR CADASTRO DE FUNCIONÁRIO ************************ \n";
    cout << "Informe a matrícula do funcionário que deseja deletar.\n";
    cout << "\nMatrícula: ";
    cin >> funDel;

    // Criar um novo array temporário
    Funcionario novosFuncionariosCadastrados[FUNCIONARIO];
    for (int i = 0; i < totalFuncionarios; i++) {
        if (funDel != funcionariosCadastrados[i].matricula) {
            novosFuncionariosCadastrados[novoTotalFuncionarios] = funcionariosCadastrados[i];
            novoTotalFuncionarios++;
        }
    }
    if (novoTotalFuncionarios < totalFuncionarios) {
        totalFuncionarios = novoTotalFuncionarios;      // Exclusão bem-sucedida, atualizar o array principal
        for (int i = 0; i < totalFuncionarios; i++) {
            funcionariosCadastrados[i] = novosFuncionariosCadastrados[i];
        }
        system("cls");
        salvarFuncionariosEmArquivo();
        cout << "\nCadastro deletado.\n";
        system("pause");
    } else {
        system("cls");
        cout << "\nFuncionário não encontrado para exclusão.\n";
        system("pause");
    }
}


int main(){
    setlocale(LC_ALL, "Portuguese");
    inicializarArmarios();

    int opMenu, opFechar;
    int opArm, numEdit, codigoDel;
    int opAlu;
    int opFun;

// MENU PRINCIPAL
    while(opFechar != 1){
        system("cls");
        cout << "\n*********************  CONSULTA E RESERVA DE ARMÁRIOS ************************ \n\n";
        cout << "1 - ARMÁRIOS.\n";
        cout << "2 - ALUNOS.\n";
        cout << "3 - FUNCIONÁRIOS.\n";
        cout << "4 - Fechar programa.\n\n";
        cout << "Informe qual campo deseja acessar, de acordo com o número: ";
        cin >> opMenu;

        switch(opMenu){
// CONSULTA DE ARMÁRIOS E RESERVAS, EDIT RESERVA, DELET RESERVA.
            case 1:
                    system("cls");
                    cout << "\n*********************  ARMÁRIOS ************************ \n\n";
                    cout << "1 - Consultar armários.\n";
                    cout << "2 - Editar armário.\n";
                    cout << "3 - Deletar reserva.\n";
                    cout << "4 - Retornar.\n\n";
                    cout << "Informe a opção desejada, de acordo com o número: ";
                    cin >> opArm;

                    switch(opArm){

    // EXIBIR ARMÁRIOS
                        case 1:
                            carregarArmariosDeArquivo();
                            exibirTodosArmarios();

                            break;
    // SELECIONAR ARMÁRIO PARA EDITAR
                        case 2:
                            carregarArmariosDeArquivo();
                            editArmario();

                            break;
    // DELETAR RESERVA
                        case 3:
                            system("cls");
                            cout << "\n*********************  DELETAR RESERVA ************************ \n";
                            cout << "Informe o código da reserva que deseja deletar.\n";
                            cout << "\nCódigo: ";
                            cin >> codigoDel;

                            break;

    // RETORNAR
                        case 4:
                            break;

                        default:
                                    cout << "\nOpção inválida, por favor tente novamente.\n";
                                    system("pause");
                    }
                break;

// CONSULTAR ALUNOS,CADASTRAR AL, EDIT DADOS AL, DELET AL
            case 2:
                    system("cls");
                    cout << "\n*********************  ALUNOS ************************ \n\n";
                    cout << "1 - Consultar aluno.\n";
                    cout << "2 - Cadastrar aluno.\n";
                    cout << "3 - Editar dados de aluno.\n";
                    cout << "4 - Deletar cadastro de aluno.\n";
                    cout << "5 - Retornar.\n\n";
                    cout << "Informe a opção desejada, de acordo com o número: ";
                    cin >> opAlu;

                    switch(opAlu){

    // CONSULTAR ALUNO
                        case 1:
                            exibirTodosAlunos();
                            break;

    // CADASTRAR ALUNO
                        case 2:
                            cadastrarAluno();

                            break;

    // EDIT DADOS ALUNO
                        case 3:
                            carregarAlunosDeArquivo();
                            editAluno();

                            break;

    // DELETE ALUNO
                        case 4:
                            carregarAlunosDeArquivo();
                            deletAluno();

                            break;

    //RETORNAR
                        case 5:
                            break;

                        default:
                            cout << "\nOpção inválida, por favor tente novamente.\n";
                            system("pause");
                    }
                break;

// CONSULTAR FUNCIONÁRIOS, CADASTRAR FUNCIONÁRIO, EDIT DADOS FUNCIONÁRIOS, DELET FUNCIONÁRIOS
            case 3:
                    system("cls");
                    cout << "\n*********************  FUNCIONÁRIOS ************************ \n";
                    cout << "1 - Consultar funcionários.\n";
                    cout << "2 - Cadastrar funcionário.\n";
                    cout << "3 - Editar dados de funcionário.\n";
                    cout << "4 - Deletar cadastro de funcionário.\n";
                    cout << "5 - Retornar.\n";
                    cout << "Informe a opção desejada, de acordo com o número: ";
                    cin >> opFun;

                    switch(opFun){

    // CONSULTAR FUNCIONÁRIOS
                        case 1:
                            exibirTodosFuncionarios();

                            break;

    // CADASTRAR FUNCIONÁRIO
                        case 2:
                            cadastrarFuncionario();

                            break;

    // EDIT DADOS FUNCIONÁRIO
                        case 3:
                            carregarFuncionariosDeArquivo();
                            editFuncionario();

                            break;

    // DELET FUNCIONÁRIO
                        case 4:
                            carregarFuncionariosDeArquivo();
                            deletFuncionario();

                            break;
    // RETORNAR
                        case 5:
                            break;

                        default:
                            cout << "\nOpção inválida, por favor tente novamente.\n";
                            system("pause");
                    }
                break;

// ENCERRAR
            case 4:
                cout << "\n\nTem certeza que deseja fechar o programa?\n";
                cout << "[1] sim    [2] não";
                cout << "\nOpção: ";
                cin >> opFechar;

                switch(opFechar){

                    case 1:
                        cout << "\nPrograma encerrado!\n";
                        break;

                    case 2:
                        break;

                    default:
                        cout << "\nOpção inválida, por favor tente novamente.\n";
                        system("pause");
                }
                break;


            default:
                cout << "\nOpção inválida, por favor tente novamente.\n";
                system("pause");

        }

    }
    cout << "\n\n";
    system("pause");
    return 0;
}
