#include <iostream>
#include <fstream>
#include <string.h>
#include <cstring>
#include <stdlib.h>
#include <stdio.h>
#include <cstdlib>
#include <windows.h>
#include <string>
#include <sstream>
#include <algorithm>
#include <locale.h>

#define PALAVRA_MAX 255
#define DESCRICAO_MAX 255

using namespace std;

struct Palavra
{
    char nome[PALAVRA_MAX];
    char descricao[DESCRICAO_MAX];
    struct Palavra* pProx;
};

struct Dicionario
{
    char letra;
    int quantidade;
    struct Palavra* palavra;
    struct Dicionario* pP;
    struct Dicionario* pA;
};

HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
COORD CursorPosition;

void gotoxy(int x, int y)
{
    CursorPosition.X = x;
    CursorPosition.Y = y;
    SetConsoleCursorPosition(console,CursorPosition);
}

Dicionario inicio_dicionario, *dicionarioAtual;

Dicionario* encontrarOuCriarNo(char letra)
{
    Dicionario* dicionarioAtual = inicio_dicionario.pP;

    while (dicionarioAtual != nullptr)
    {
        if (dicionarioAtual->letra == letra)
        {
            return dicionarioAtual;
        }
        dicionarioAtual = dicionarioAtual->pP;
    }


    Dicionario* novoNo = new Dicionario;
    novoNo->letra = letra;
    novoNo->quantidade = 0;
    novoNo->palavra = nullptr;
    novoNo->pP = nullptr;
    novoNo->pA = nullptr;


    novoNo->pP = inicio_dicionario.pP;
    if (inicio_dicionario.pP != nullptr)
    {
        inicio_dicionario.pP->pA = novoNo;
    }
    inicio_dicionario.pP = novoNo;

    return novoNo;
}

void inserirPalavra(Dicionario* dicionario, const char nomeTemp[PALAVRA_MAX], const char descriTemp[DESCRICAO_MAX])
{
    Palavra* novaPalavra = new Palavra;
    strcpy(novaPalavra->nome, nomeTemp);
    strcpy(novaPalavra->descricao, descriTemp);
    novaPalavra->pProx = nullptr;

    if (dicionario->palavra == nullptr)
    {
        dicionario->palavra = novaPalavra;
    }
    else
    {
        Palavra* palavraAtual = dicionario->palavra;
        while (palavraAtual->pProx != nullptr)
        {
            palavraAtual = palavraAtual->pProx;
        }
        palavraAtual->pProx = novaPalavra;
    }

    dicionario->quantidade++;
}

void inserir(char nomeTemp[PALAVRA_MAX], char descriTemp[DESCRICAO_MAX])
{
    char primeiraLetra = toupper(nomeTemp[0]);
    Dicionario* dicionario = encontrarOuCriarNo(primeiraLetra);
    inserirPalavra(dicionario, nomeTemp, descriTemp);
}

void salvarEmArquivo()
{
    FILE *arquivo = fopen("dicionario.txt", "w");
    Dicionario* dicionarioAtual = inicio_dicionario.pP;

    while (dicionarioAtual != nullptr)
    {
        Palavra* palavraAtual = dicionarioAtual->palavra;

        while (palavraAtual != nullptr)
        {
            fprintf(arquivo, "%s\n", palavraAtual->nome);
            fprintf(arquivo, "%s\n", palavraAtual->descricao);
            palavraAtual = palavraAtual->pProx;
        }

        dicionarioAtual = dicionarioAtual->pP;
    }

    fclose(arquivo);
}

void carregarDeArquivo()
{
    char nomeTemp[PALAVRA_MAX];
    char descriTemp[DESCRICAO_MAX];

    FILE* arquivo = fopen("dicionario.txt", "r");
    if (arquivo == NULL)
    {
        cout << "Arquivo 'dicionario.txt' nao encontrado!" << endl;
        return;
    }

    while (!feof(arquivo))
    {
        fgets(nomeTemp, sizeof(nomeTemp), arquivo);
        fgets(descriTemp, sizeof(descriTemp), arquivo);
        nomeTemp[strcspn(nomeTemp, "\n")] = '\0';
        descriTemp[strcspn(descriTemp, "\n")] = '\0';


        char primeiraLetra = toupper(nomeTemp[0]);
        Dicionario* dicionario = encontrarOuCriarNo(primeiraLetra);
        Palavra* palavraAtual = dicionario->palavra;
        bool palavraEncontrada = false;

        while (palavraAtual != nullptr)
        {
            if (strcmp(palavraAtual->nome, nomeTemp) == 0)
            {
                palavraEncontrada = true;
                break;
            }
            palavraAtual = palavraAtual->pProx;
        }

        if (!palavraEncontrada)
        {
            inserirPalavra(dicionario, nomeTemp, descriTemp);
        }
    }

    fclose(arquivo);
}

void inserirManualmente()
{
    char nomeTemp[PALAVRA_MAX], descrTemp[DESCRICAO_MAX];
    cout << " Insira a Palavra Desejada: ";
    cin.ignore();
    cin.getline(nomeTemp, PALAVRA_MAX);
    cout << " Insira a Descricao da Palavra: ";
    cin.getline(descrTemp, DESCRICAO_MAX);
    inserir(nomeTemp, descrTemp);
    salvarEmArquivo();
}

void quebrarString(const std::string& texto, int palavrasPorLinha)
{
    std::istringstream stream(texto);
    std::string palavra;
    int contador = 0;

    while (stream >> palavra)
    {
        std::cout << palavra << " ";
        contador++;

        if (contador == palavrasPorLinha)
        {
            std::cout << std::endl;
            contador = 0;
        }
    }
}

void excluirPalavra()
{
    char nomeTemp[PALAVRA_MAX];
    char primeiraLetra;
    Palavra* palavraAux = nullptr;
    Palavra* palavraAtual = nullptr;

    cout << " Insira a Palavra Desejada: ";
    cin.ignore();
    cin.getline(nomeTemp, PALAVRA_MAX);
    primeiraLetra = toupper(nomeTemp[0]);

    Dicionario* dicionarioAtual = inicio_dicionario.pP;

    while (dicionarioAtual != nullptr)
    {
        if (dicionarioAtual->letra == primeiraLetra)
        {
            palavraAtual = dicionarioAtual->palavra;
            while (palavraAtual != nullptr)
            {
                if (strcmp(nomeTemp, palavraAtual->nome) == 0)
                {
                    cout << "Remover " << palavraAtual->nome << "? Sim[S] Nao[outra tecla]----> ";
                    char resp;
                    cin.get(resp);
                    cin.ignore();
                    if (toupper(resp) == 'S')
                    {
                        if (palavraAux == nullptr)
                        {

                            dicionarioAtual->palavra = palavraAtual->pProx;
                        }
                        else
                        {
                            palavraAux->pProx = palavraAtual->pProx;
                        }
                        delete palavraAtual;
                        cout << "Palavra removida com sucesso." << endl;
                        salvarEmArquivo();
                        return;
                    }
                    else
                    {
                        cout << "Ação cancelada." << endl;
                        return;
                    }
                }
                palavraAux = palavraAtual;
                palavraAtual = palavraAtual->pProx;
            }
        }
        dicionarioAtual = dicionarioAtual->pP;
    }

    cout << "Palavra não encontrada." << endl;
}






void exibir() {
    // armazenar as letras
    char letras[26];
    int numLetras = 0;

    // Percorrer o dicionário e adicionar as letras ao array
    Dicionario* dicionarioAtual = inicio_dicionario.pP;
    while (dicionarioAtual != nullptr) {
        letras[numLetras] = dicionarioAtual->letra;
        numLetras++;
        dicionarioAtual = dicionarioAtual->pP;
    }

    // Ordenar o array de letras em ordem alfabética
    for (int i = 0; i < numLetras - 1; i++) {
        for (int j = i + 1; j < numLetras; j++) {
            if (letras[i] > letras[j]) {
                // Trocar as letras
                char temp = letras[i];
                letras[i] = letras[j];
                letras[j] = temp;
            }
        }
    }

    int palavrasPorlinha = 10;
    for (int i = 0; i < numLetras; i++) {
        char letra = letras[i];
        dicionarioAtual = inicio_dicionario.pP;
        while (dicionarioAtual != nullptr) {
            if (dicionarioAtual->letra == letra) {
                cout << "Letra: " << dicionarioAtual->letra << "\tQuantidade de palavras: " << dicionarioAtual->quantidade << "\n";

                Palavra* palavraAtual = dicionarioAtual->palavra;
                while (palavraAtual != nullptr) {
                    cout << palavraAtual->nome << "\n";
                    quebrarString(palavraAtual->descricao, palavrasPorlinha);
                    cout <<"\n";
                    palavraAtual = palavraAtual->pProx;
                }
            }
            dicionarioAtual = dicionarioAtual->pP;
        }
    }

    system("pause");
}



Palavra* buscarPorNome(const char palavra[PALAVRA_MAX])
{
    Dicionario* dicionarioAtual = inicio_dicionario.pP;

    while (dicionarioAtual != nullptr)
    {
        Palavra* palavraAtual = dicionarioAtual->palavra;

        while (palavraAtual != nullptr)
        {
            if (strcmp(palavra, palavraAtual->nome) == 0)
            {
                return palavraAtual;
            }
            palavraAtual = palavraAtual->pProx;
        }

        dicionarioAtual = dicionarioAtual->pP;
    }

    return nullptr;
}

void exibirBuscaPorNome()
{
    char nomeTemp[PALAVRA_MAX];
    cout << "Digite a palavra que deseja buscar: ";
    cin.ignore();
    cin.getline(nomeTemp, PALAVRA_MAX);
    Palavra* palavraTemp = buscarPorNome(nomeTemp);

    if (palavraTemp != nullptr)
    {
        cout << "Nome: " << palavraTemp->nome << "\n";
        cout << "Descricao: " << palavraTemp->descricao << "\n";
    }
    else
    {
        cout << "Palavra nao encontrada.\n";
    }
    system("pause");
}

void pesquisaPorRelevancia()
{

    cin.ignore();
    string palavraChave;
    cout << "Digite a palavra-chave para pesquisa de relevância: ";
    getline(cin, palavraChave);

    bool encontrouRelevante = false;


    Dicionario* dicionarioAtual = inicio_dicionario.pP;
    while (dicionarioAtual != nullptr)
    {
        Palavra* palavraAtual = dicionarioAtual->palavra;
        while (palavraAtual != nullptr)
        {

            const string descricao = palavraAtual->descricao;
            int contagem = 0;
            size_t pos = descricao.find(palavraChave);
            while (pos != string::npos)
            {
                contagem++;
                pos = descricao.find(palavraChave, pos + 1);
            }


            if (contagem > 0)
            {
                encontrouRelevante = true;
                cout << "Descrição: " << descricao << endl;
                cout << "Ocorrências: " << contagem << endl;
                cout << endl;
            }
            palavraAtual = palavraAtual->pProx;
        }
        dicionarioAtual = dicionarioAtual->pP;
    }

    if (!encontrouRelevante)
    {
        cout << "Nenhuma descrição relevante encontrada para '" << palavraChave << "'." << endl;
    }
    system("pause");
}



int main()
{
    system("mode con:cols=85 lines=30");
    setlocale(LC_ALL, "Portuguese");

    inicio_dicionario.pP = nullptr;
    carregarDeArquivo();


    int opFechar, opMenu;
    while(opFechar != 1)
    {
        system("cls");
        gotoxy(0,0);
        cout << "=====================================================================================";
        gotoxy(0,1);
        cout << "|";
        gotoxy(30,1);
        cout << "DICIONÁRIO (CIDADES)";
        gotoxy(84,1);
        cout << "|";
        gotoxy(0,2);
        cout << "=====================================================================================";


        gotoxy(15,4);
        cout << "1 - Adicionar palavra.";


        gotoxy(15,5);
        cout << "2 - Exibir todas as palavras.";


        gotoxy(15,6);
        cout << "3 - Pesquisar por palavra.";


        gotoxy(15,7);
        cout << "4 - Pesquisar por relevancia.";


        gotoxy(15,8);
        cout << "5 - Excluir Palavra.";


        gotoxy(15,9);
        cout << "6 - Fechar programa.";


        gotoxy(15,11);
        cout << "Informe qual campo deseja acessar: ";




        cin >> opMenu;

        switch(opMenu)
        {


        case 1:
            inserirManualmente();
            break;


        case 2:
            exibir();
            break;


        case 3:
            exibirBuscaPorNome();
            break;


        case 4:
            pesquisaPorRelevancia();
            break;

        case 5:
            excluirPalavra();


        case 6:
            cout << "\n\nTem certeza que deseja fechar o programa?\n";
            cout << "[1] sim    [2] nao";
            cout << "\nopcao: ";
            cin >> opFechar;

            switch(opFechar)
            {

            case 1:
                cout << "\nPrograma encerrado!\n";
                break;

            case 2:
                break;

            default:
                cout << "\nOpcao invalida, por favor tente novamente.\n";
                system("pause");
            }
            break;


        default:
            cout << "\nOpcao invalida, por favor tente novamente.\n";
            system("pause");

        }

    }
    cout << "\n\n";
    system("pause");
    return 0;
}
