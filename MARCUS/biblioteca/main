// DICIONARIO (CIDADES).
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstring>
#include <stdlib.h>
#include <stdio.h>
#include <cstdlib>
#include <windows.h>
#include <string>
#include <sstream>
#include <locale.h>

#define PALAVRA_MAX 255
#define DESCRICAO_MAX 255

using namespace std;

struct Palavra
{
    char nome[PALAVRA_MAX];
    char descricao[DESCRICAO_MAX];
    struct Palavra* pProx;
};

struct Dicionario
{
    char letra;
    int quantidade;
    struct Palavra* palavra;
    struct Dicionario* pP;
    struct Dicionario* pA;
};

struct Ocorrencia
{
    string palavra;
    string descricao;
    int contagem;
};

HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
COORD CursorPosition;

void gotoxy(int x, int y)
{
    CursorPosition.X = x; // Locates column
    CursorPosition.Y = y; // Locates Row
    SetConsoleCursorPosition(console,CursorPosition); // Sets position for next thing to be printed
}

Dicionario inicio_dicionario, *dicionarioAtual;

void clearScreen()
{
    system("cls");
}

Dicionario* encontrarOuCriarNo(char letra)
{
    Dicionario* dicionarioAtual = inicio_dicionario.pP;

    while (dicionarioAtual != NULL)
    {
        if (dicionarioAtual->letra == letra)
        {
            return dicionarioAtual;
        }
        dicionarioAtual = dicionarioAtual->pP;
    }


    Dicionario* novoNo = new Dicionario;
    novoNo->letra = letra;
    novoNo->quantidade = 0;
    novoNo->palavra = NULL;
    novoNo->pP = NULL;
    novoNo->pA = NULL;


    novoNo->pP = inicio_dicionario.pP;
    if (inicio_dicionario.pP != NULL)
    {
        inicio_dicionario.pP->pA = novoNo;
    }
    inicio_dicionario.pP = novoNo;

    return novoNo;
}

void inserirPalavra(Dicionario* dicionario, const char nomeTemp[PALAVRA_MAX], const char descriTemp[DESCRICAO_MAX])
{
    Palavra* novaPalavra = new Palavra;
    strcpy(novaPalavra->nome, nomeTemp);
    strcpy(novaPalavra->descricao, descriTemp);
    novaPalavra->pProx = NULL;

    if (dicionario->palavra == NULL)
    {
        dicionario->palavra = novaPalavra;
    }
    else
    {
        Palavra* palavraAtual = dicionario->palavra;
        while (palavraAtual->pProx != NULL)
        {
            palavraAtual = palavraAtual->pProx;
        }
        palavraAtual->pProx = novaPalavra;
    }

    dicionario->quantidade++;
}


void inserir(char nomeTemp[PALAVRA_MAX], char descriTemp[DESCRICAO_MAX])
{
    char primeiraLetra = toupper(nomeTemp[0]);
    Dicionario* dicionario = encontrarOuCriarNo(primeiraLetra);
    inserirPalavra(dicionario, nomeTemp, descriTemp);
}

void salvarEmArquivo()
{
    FILE* arquivo = fopen("dicionario.txt","w");
    Dicionario* dicionarioAtual = inicio_dicionario.pP;

    while (dicionarioAtual != NULL)
    {
        Palavra* palavraAtual = dicionarioAtual->palavra;

        while (palavraAtual != NULL)
        {
            fprintf(arquivo, "%s\n", palavraAtual->nome);
            fprintf(arquivo, "%s\n", palavraAtual->descricao);
            palavraAtual = palavraAtual->pProx;
        }

        dicionarioAtual = dicionarioAtual->pP;
    }

    fclose(arquivo);
}

void carregarDeArquivo()
{
    char nomeTemp[PALAVRA_MAX];
    char descriTemp[DESCRICAO_MAX];

    FILE* arquivo = fopen("dicionario.txt", "r");

    if (arquivo == NULL)
    {
        cout << "Arquivo 'dicionario.txt' nao encontrado!" << endl;
        return;
    }

    while (!feof(arquivo))
    {
        fgets(nomeTemp, sizeof(nomeTemp), arquivo);
        fgets(descriTemp, sizeof(descriTemp), arquivo);
        nomeTemp[strcspn(nomeTemp, "\n")] = '\0';
        descriTemp[strcspn(descriTemp, "\n")] = '\0';


        char primeiraLetra = toupper(nomeTemp[0]);
        Dicionario* dicionario = encontrarOuCriarNo(primeiraLetra);
        Palavra* palavraAtual = dicionario->palavra;
        bool palavraEncontrada = false;

        while (palavraAtual != NULL)
        {
            if (strcmp(palavraAtual->nome, nomeTemp) == 0)
            {
                palavraEncontrada = true;
                break;
            }
            palavraAtual = palavraAtual->pProx;
        }

        if (!palavraEncontrada)
        {
            inserirPalavra(dicionario, nomeTemp, descriTemp);
        }
    }

    fclose(arquivo);
}

void inserirManualmente()
{

    char nomeTemp[PALAVRA_MAX], descrTemp[DESCRICAO_MAX];


    gotoxy(25, 2);
    cout << "-----------------------------------------------------------------";
    gotoxy(25, 3);
    cout << "                        ADICIONAR PALAVRA                        ";
    gotoxy(25, 4);
    cout << "-----------------------------------------------------------------";

    gotoxy(25, 6);
    cout << "Insira a Palavra Desejada:";
    gotoxy(25, 8);
    cout << "Insira a Descricao da Palavra: ";
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    cin.ignore();
    gotoxy(53, 6);
    cin.getline(nomeTemp, PALAVRA_MAX);
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    gotoxy(25, 9);
    cin.getline(descrTemp, DESCRICAO_MAX);
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    inserir(nomeTemp, descrTemp);
    salvarEmArquivo();
}

void quebrarString(const string& texto, int palavrasPorLinha)
{
    istringstream stream(texto);
    string palavra;
    int contador = 0;

    while (stream >> palavra)
    {
        cout << palavra << " ";
        contador++;

        if (contador == palavrasPorLinha)
        {
            cout << std::endl;
            contador = 0;
        }
    }
    cout << "\n";
}

void deleteLetra(Dicionario* dicionario)
{
    Dicionario* dicionarioNo = dicionario;
    Dicionario* dicionarioAux = dicionarioNo->pA;

    if (dicionarioAux != NULL)
    {
        dicionarioAux->pP = dicionarioNo->pP;
    }


    if (dicionarioNo->pP != NULL)
    {
        dicionarioAux = dicionarioNo->pP;
        dicionarioAux->pA = dicionarioNo->pA;
    }

    dicionarioNo->pP = NULL;
    dicionarioNo->pA = NULL;
    delete dicionarioNo;
}

void excluirPalavra(const char nomeTemp[PALAVRA_MAX])
{
    char primeiraLetra = toupper(nomeTemp[0]);
    Dicionario* dicionarioAtual = inicio_dicionario.pP;

    while (dicionarioAtual != NULL)
    {
        if (dicionarioAtual->letra == primeiraLetra)
        {
            Palavra* palavraAux = NULL;
            Palavra* palavraAtual = dicionarioAtual->palavra;

            while (palavraAtual != NULL)
            {
                if (strcmp(nomeTemp, palavraAtual->nome) == 0)
                {
                    if (palavraAux == NULL)
                    {
                        dicionarioAtual->palavra = palavraAtual->pProx;
                    }
                    else
                    {
                        palavraAux->pProx = palavraAtual->pProx;
                    }
                    delete palavraAtual;
                    dicionarioAtual->quantidade--;



                    if (dicionarioAtual->quantidade == 0)
                    {

                        deleteLetra(dicionarioAtual);
                    }

                    salvarEmArquivo();
                    return;
                }
                palavraAux = palavraAtual;
                palavraAtual = palavraAtual->pProx;
            }
        }
        dicionarioAtual = dicionarioAtual->pP;
    }

    cout << "Palavra nÃ£o encontrada." << endl;
}

void excluirPalavraIn()
{
    char nomeTemp[PALAVRA_MAX];

    gotoxy(25, 2);
    cout << "-----------------------------------------------------------------";
    gotoxy(25, 3);
    cout << "                         EXCLUIR PALAVRA                         ";
    gotoxy(25, 4);
    cout << "-----------------------------------------------------------------";
    gotoxy(25, 6);
    cout << "Insira a palavra que deseja excluir: ";

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    gotoxy(25, 8);
    cin.ignore();
    cin.getline(nomeTemp,PALAVRA_MAX);
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    gotoxy(25, 11);
    excluirPalavra(nomeTemp);
    gotoxy(25, 12);
    system("pause");

}

void exibir()
{
    // armazenar as letras
    char letras[26];
    int numLetras = 0;

    // Percorrer o dicionario e adicionar as letras ao array
    Dicionario* dicionarioAtual = inicio_dicionario.pP;
    while (dicionarioAtual != nullptr)
    {
        letras[numLetras] = dicionarioAtual->letra;
        numLetras++;
        dicionarioAtual = dicionarioAtual->pP;
    }

    // Ordenar o array de letras em ordem alfabetica
    for (int i = 0; i < numLetras - 1; i++)
    {
        for (int j = i + 1; j < numLetras; j++)
        {
            if (letras[i] > letras[j])
            {
                // Trocar as letras
                char temp = letras[i];
                letras[i] = letras[j];
                letras[j] = temp;
            }
        }
    }

    int palavrasPorlinha = 10;
    for (int i = 0; i < numLetras; i++)
    {
        char letra = letras[i];
        dicionarioAtual = inicio_dicionario.pP;
        while (dicionarioAtual != nullptr)
        {
            if (dicionarioAtual->letra == letra)
            {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
                cout << "Letra: " << dicionarioAtual->letra;
                cout << "\t\t        Quantidade de palavras: " << dicionarioAtual->quantidade << "\n";
                cout << "---------------------------------------------------------\n";
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
                Palavra* palavraAtual = dicionarioAtual->palavra;
                while (palavraAtual != nullptr)
                {
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
                    cout << palavraAtual->nome << "\n";
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
                    quebrarString(palavraAtual->descricao, palavrasPorlinha);
                    cout <<"\n";
                    palavraAtual = palavraAtual->pProx;
                }
            }
            dicionarioAtual = dicionarioAtual->pP;
        }
    }

    system("pause");
}



Palavra* buscarPorNome(char palavra[PALAVRA_MAX])
{
    Dicionario* dicionarioAtual = inicio_dicionario.pP;

    while (dicionarioAtual != NULL)
    {
        Palavra* palavraAtual = dicionarioAtual->palavra;

        while (palavraAtual != NULL)
        {
            if (strcmp(palavra, palavraAtual->nome) == 0)
            {
                return palavraAtual;
            }
            palavraAtual = palavraAtual->pProx;
        }

        dicionarioAtual = dicionarioAtual->pP;
    }

    return NULL;
}

void exibirBuscaPorNome()
{
    char nomeTemp[PALAVRA_MAX];

    gotoxy(25, 2);
    cout << "-----------------------------------------------------------------";
    gotoxy(25, 3);
    cout << "                   BUSCA POR NOME DE PALAVRA                     ";
    gotoxy(25, 4);
    cout << "-----------------------------------------------------------------";

    gotoxy(25, 6);
    cout << "Digite a palavra que deseja buscar: ";
    gotoxy(25, 8);

    cin.ignore();
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    cin.getline(nomeTemp, PALAVRA_MAX);
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);

    Palavra* palavraTemp = buscarPorNome(nomeTemp);

    if (palavraTemp != NULL)
    {
        gotoxy(25, 10);
        cout << "Nome: " ;
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
        cout<< palavraTemp->nome;
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
        gotoxy(25, 12);
        cout << "Descricao: " ;
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
        cout<< palavraTemp->descricao;
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    }
    else
    {
        gotoxy(25, 10);
        cout << "Palavra nao encontrada.";
    }
    gotoxy(25,20);
    system("pause");
}


void alterarDescricao()
{
    clearScreen();
    char nomeTemp[PALAVRA_MAX], descriNovo[DESCRICAO_MAX];

    gotoxy(25, 2);
    cout << "-----------------------------------------------------------------";
    gotoxy(25, 3);
    cout << "                       EDITAR DESCRIÃÃO                          ";
    gotoxy(25, 4);
    cout << "-----------------------------------------------------------------";

    gotoxy(25, 6);
    cout << "Insira a palavra que deseja alterar a descricao: ";
    cin.ignore();
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    gotoxy(25, 7);
    cin.getline(nomeTemp, PALAVRA_MAX);
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);

    Palavra* palavraAtual = buscarPorNome(nomeTemp);

    if (palavraAtual != NULL)
    {
        gotoxy(25,9);
        cout << "Insira a nova descricao da palavra: ";
        gotoxy(25,10);
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
        cin.getline(descriNovo, DESCRICAO_MAX);
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
        strcpy(palavraAtual->descricao, descriNovo);
        salvarEmArquivo();
        gotoxy(25,15);
        cout << "Descricao da palavra alterada!";
        gotoxy(25,16);
        system("pause");
        system("cls");
    }
    else
    {
        gotoxy(25,15);
        cout << "Palavra nao encontrada!";
        gotoxy(25,16);
        system("pause");
        system("cls");
    }


}

void alterarNome()
{
    clearScreen();
    char nomeTemp[PALAVRA_MAX], nomeNovo[PALAVRA_MAX];
    gotoxy(25, 2);
    cout << "-----------------------------------------------------------------";
    gotoxy(25, 3);
    cout << "                          EDITAR NOME                            ";
    gotoxy(25, 4);
    cout << "-----------------------------------------------------------------";

    gotoxy(25, 6);
    cout << "Insira a palavra que deseja alterar o nome: ";
    cin.ignore();
    gotoxy(25, 8);
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    cin.getline(nomeTemp, PALAVRA_MAX);
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);

    Palavra* palavraAtual = buscarPorNome(nomeTemp);

    if (palavraAtual != NULL)
    {
        gotoxy(25, 10);
        cout << "Insira o novo nome: ";
        gotoxy(25, 12);
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
        cin.getline(nomeNovo, PALAVRA_MAX);
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
        if (strlen(nomeNovo) == 0)
        {
            gotoxy(25, 15);
            cout << "Nome nao pode ser vazio. OperaÃ§ao cancelada.";
            gotoxy(25, 16);
            system("pause");
            system("cls");
            return;
        }

        char descriTemp[DESCRICAO_MAX];
        strcpy(descriTemp, palavraAtual->descricao);


        if (nomeTemp[0] != nomeNovo[0])
        {
            inserir(nomeNovo, descriTemp);
            excluirPalavra(nomeTemp);
        }
        else
        {

            strcpy(palavraAtual->nome, nomeNovo);
            strcpy(palavraAtual->descricao, descriTemp);
        }

        salvarEmArquivo();
        gotoxy(25, 15);
        cout << "Nome da palavra alterado!";
        gotoxy(25, 16);
        system("pause");
        system("cls");
    }
    else
    {
        gotoxy(25, 15);
        cout << "Palavra nao encontrada!";
        gotoxy(25, 16);
        system("pause");
        system("cls");
    }
}

void alterarTudo()
{
    clearScreen();
    char nomeTemp[PALAVRA_MAX], nomeNovo[PALAVRA_MAX], descriNovo[DESCRICAO_MAX];

    gotoxy(25, 2);
    cout << "-----------------------------------------------------------------";
    gotoxy(25, 3);
    cout << "                           EDITAR TUDO                           ";
    gotoxy(25, 4);
    cout << "-----------------------------------------------------------------";

    gotoxy(25, 6);
    cout << "Insira a palavra que deseja alterar: ";
    cin.ignore();
    gotoxy(25, 8);
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    cin.getline(nomeTemp, PALAVRA_MAX);
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);

    Palavra* palavraAtual = buscarPorNome(nomeTemp);

    if (palavraAtual != NULL)
    {
        gotoxy(25, 10);
        cout << "Insira o novo nome: ";
        gotoxy(25, 13);
        cout << "Insira a nova descricao: ";

        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
        gotoxy(25, 11);
        cin.getline(nomeNovo, PALAVRA_MAX);
        gotoxy(25, 14);
        cin.getline(descriNovo, DESCRICAO_MAX);
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
        inserir(nomeNovo, descriNovo);
        excluirPalavra(nomeTemp);
        salvarEmArquivo();
        gotoxy(25, 18);
        cout << "Palavra alterada!\n";
        gotoxy(25, 19);
        system("pause");
        system("cls");

    }
    else
    {
        gotoxy(25, 18);
        cout << "Palavra nao encontrada!\n";
        gotoxy(25, 19);
        system("pause");
        system("cls");
    }

}

void menuEditar()
{
    int opMenu;
    system("cls");
    do
    {

        gotoxy(25, 2);
        cout << "-----------------------------------------------------------------";
        gotoxy(25, 3);
        cout << "                             EDITAR                              ";
        gotoxy(25, 4);
        cout << "-----------------------------------------------------------------";

        gotoxy(25, 7);
        cout << "1 - Editar Descricao.";
        gotoxy(25, 8);
        cout << "2 - Editar Nome.";
        gotoxy(25, 9);
        cout << "3 - Editar Tudo.";
        gotoxy(25, 10);
        cout << "4 - Voltar.";
        gotoxy(25, 12);
        cout << "Informe qual campo deseja acessar, de acordo com o numero: ";
        gotoxy(25, 13);
        cin >> opMenu;

        switch(opMenu)
        {

        case 1:
            alterarDescricao();
            break;

        case 2:
            alterarNome();
            break;

        case 3:
            alterarTudo();
            break;

        case 4:
            return;
            break;

        default:
            gotoxy(25, 15);
            cout << "Opcao invalida, por favor tente novamente.";
            gotoxy(25, 16);
            system("pause");
            system("cls");
            menuEditar();
        }
    }
    while(opMenu!=4);
}

void pesquisaPorRelevancia()
{

    gotoxy(25, 2);
    cout << "-----------------------------------------------------------------";
    gotoxy(25, 3);
    cout << "                      BUSCA POR RELEVÃNCIA                       ";
    gotoxy(25, 4);
    cout << "-----------------------------------------------------------------";

    gotoxy(25, 6);
    cout << "Digite a palavra-chave para pesquisa de relevancia: ";
    gotoxy(25, 8);
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    cin.ignore();
    string palavraChave;
    cout << endl;
    gotoxy(25, 8);
    getline(cin, palavraChave);
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);

    int maxOcorrencias = 125;
    Ocorrencia* ocorrencias = new Ocorrencia[maxOcorrencias];

    int numOcorrencias = 0;

    // Percorrer o dicionario e suas descricoes
    Dicionario* dicionarioAtual = inicio_dicionario.pP;
    while (dicionarioAtual != nullptr)
    {
        Palavra* palavraAtual = dicionarioAtual->palavra;

        while (palavraAtual != nullptr)
        {

            // Verifica se a palavra-chave esta na descricao
            const string descricao = palavraAtual->descricao;
            int contagem = 0;
            size_t posicao = descricao.find(palavraChave);
            while (posicao != string::npos)
            {
                contagem++;
                posicao = descricao.find(palavraChave, posicao + 1);
            }

            // Se a palavra-chave for encontrada e houver espaÃ§o armazene as informaÃ§Ãµes
            if (contagem > 0 && numOcorrencias < maxOcorrencias)
            {
                ocorrencias[numOcorrencias].palavra = palavraAtual->nome;
                ocorrencias[numOcorrencias].descricao = descricao;
                ocorrencias[numOcorrencias].contagem = contagem;
                numOcorrencias++;
            }
            palavraAtual = palavraAtual->pProx;
        }
        dicionarioAtual = dicionarioAtual->pP;
    }

    // Ordena em decrescente
    for (int i = 0; i < numOcorrencias - 1; i++)
    {
        for (int j = i + 1; j < numOcorrencias; j++)
        {
            if (ocorrencias[i].contagem < ocorrencias[j].contagem)
            {
                Ocorrencia temp = ocorrencias[i];
                ocorrencias[i] = ocorrencias[j];
                ocorrencias[j] = temp;
            }
        }
    }

    // Exibir o resultado
    system("cls");
    cout << "Pesquisa: " ;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
    cout << palavraChave << "\n\n";
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    for (int i = 0; i < numOcorrencias; i++)
    {

        cout << "Palavra: ";
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
        cout << ocorrencias[i].palavra << endl;
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);

        cout << "DescriÃ§ao: " ;
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
        cout<< ocorrencias[i].descricao << endl;
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);

        cout << "Ocorrencias: ";
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
        cout<< ocorrencias[i].contagem << endl;
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
        cout << endl;
    }

    if (numOcorrencias == 0)
    {
        cout << "Nenhuma descriÃ§Ã£o relevante encontrada para '" << palavraChave << "'." << endl;
    }
    delete[] ocorrencias;

    system("pause");
}

int main()
{
    setlocale(LC_ALL, "Portuguese");
    inicio_dicionario.pP = NULL;
    carregarDeArquivo();

    int opFechar, opMenu;
    while (opFechar != 1)
    {
        system("cls");
        system("color 0A");

        gotoxy(25, 2);
        cout << "-----------------------------------------------------------------";
        gotoxy(25, 3);
        cout << "                       DICIONARIO (CIDADES)                      ";
        gotoxy(25, 4);
        cout << "-----------------------------------------------------------------";



        gotoxy(25, 7);
        cout << "1 - Adicionar palavra.";
        gotoxy(25, 8);
        cout << "2 - Exibir todas as palavras.";
        gotoxy(25, 9);
        cout << "3 - Pesquisar por palavra.";
        gotoxy(25, 10);
        cout << "4 - Pesquisar por relevÃ¢ncia.";
        gotoxy(25, 11);
        cout << "5 - Excluir Palavra.";
        gotoxy(25, 12);
        cout << "6 - Editar.";
        gotoxy(25, 13);
        cout << "7 - Fechar programa.";
        gotoxy(25, 16);
        cout << "Informe qual campo deseja acessar, de acordo com o nÃºmero: ";
        gotoxy(25, 17);
        cin >> opMenu;

        switch(opMenu)
        {

        case 1:
            system("cls");
            inserirManualmente();
            break;

        case 2:
            system("cls");
            exibir();
            break;

        case 3:
            system("cls");
            exibirBuscaPorNome();
            break;

        case 4:
            system("cls");
            pesquisaPorRelevancia();
            break;

        case 5:
            system("cls");
            excluirPalavraIn();
            break;

        case 6:
            system("cls");
            menuEditar();
            break;

        case 7:
            system("cls");
            gotoxy(32, 11);
            cout << "Tem certeza que deseja fechar o programa?";
            gotoxy(43, 13);
            cout << "[1] sim    [2] nao";
            gotoxy(32, 15);
            cout << "opcao: ";
            gotoxy(32, 16);
            cin >> opFechar;

            switch(opFechar)
            {

            case 1:
                gotoxy(43, 18);
                cout << "Programa encerrado!";
                break;

            case 2:
                break;

            default:
                gotoxy(33, 18);
                cout << "Opcao invalida, por favor tente novamente.";
                gotoxy(33, 19);
                system("pause");
            }
            break;


        default:
            cout << "\nOpcao invalida, por favor tente novamente.\n";
            system("pause");

        }

    }
    cout << "\n\n";

    return 0;
}
