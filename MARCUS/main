#include <iostream>
#include <string>
#include <cstring>
#include <locale.h>
#include <cstdlib>
#define FUNCIONARIOS 10
#define ALUNOS 10
#define ARMARIOS 5
#define RESERVAS 100

using namespace std;

typedef struct {
    int numero;
    bool disponivel;
    bool estado;
}Armario;

typedef struct {
    int codigo;
    int matriculaAluno;
    int matriculaFuncionario;
    int numeroArmario;
    char dataRecebimento[11];
    char dataDevolucao[11];
} Reserva;

typedef struct
{
    char nome[50], usuario[50], email[50],telefone[11];
    int matricula, senha;
} Funcionario;

typedef struct
{
    char nome[50], email[50],fone[11];
    int matricula, turmaSerie;
} Aluno;

//VETORES
Funcionario funcionariosCadastrados[FUNCIONARIOS];
int totalFuncionarios = 0;

Aluno alunosCadastrados[ALUNOS];
int totalAlunos = 0;

Reserva reservas[RESERVAS];
int totalReservas = 0;

Armario armarios[ARMARIOS];

void salvarReservasEmArquivo() {
    FILE* arquivo = fopen("reservas.txt", "w");

    if (arquivo != NULL) {
        for (int i = 0; i < totalReservas; i++) {
            fprintf(arquivo, "%d %d %s %s\n",
                    reservas[i].matriculaAluno,
                    reservas[i].numeroArmario,
                    reservas[i].dataRecebimento,
                    reservas[i].dataDevolucao);
        }
        fclose(arquivo);
    } else {
        cout << "Erro ao abrir o arquivo de reservas." << endl;
    }
}

void salvarArmariosEmArquivo() {
    FILE* arquivo = fopen("armarios.txt", "w");

    if (arquivo != NULL) {
        for (int i = 0; i < ARMARIOS; i++) {
            fprintf(arquivo, "%d %d %d\n",
                    armarios[i].numero,
                    armarios[i].disponivel,
                    armarios[i].estado);
        }
        fclose(arquivo);
    } else {
        cout << "Erro ao abrir o arquivo de armários." << endl;
    }
}

void carregarArmariosDeArquivo() {
    FILE* arquivo = fopen("armarios.txt", "w");

    if (arquivo != NULL) {
        for (int i = 0; i < ARMARIOS; i++) {
            fprintf(arquivo, "%d %d %d\n",
                    armarios[i].numero,
                    armarios[i].disponivel,
                    armarios[i].estado);
        }
        fclose(arquivo);
    } else {
        cout << "Erro ao abrir o arquivo de armários." << endl;
    }
}

void inicializarArmarios() {
    FILE* arquivo = fopen("armarios.txt", "r");

    if (arquivo == NULL) {
        // Arquivo não existe, então inicialize os armários
        for (int i = 0; i < ARMARIOS; i++) {
            armarios[i].numero = i + 1; // Número do armário
            armarios[i].disponivel = true; // Armário inicialmente disponível
            armarios[i].estado = false; // Estado inicial do armário
        }

        // Salve as informações dos armários em um arquivo
        salvarArmariosEmArquivo();
    } else {
        // Arquivo existe, então carregue as informações dos armários
        for (int i = 0; i < ARMARIOS; i++) {
            if (fscanf(arquivo, "%d %d %d\n",
                        &armarios[i].numero,
                        &armarios[i].disponivel,
                        &armarios[i].estado) == EOF) {
                break;
            }
        }
        fclose(arquivo);
    }
}


void salvarAlunosEmArquivo() {

    FILE* arquivo = fopen("alunos.txt", "w");

    for (int i = 0; i < totalAlunos; i++)
    {
        fprintf(arquivo, "%s %d %s %s %d\n",
                alunosCadastrados[i].nome,
                alunosCadastrados[i].matricula,
                alunosCadastrados[i].email,
                alunosCadastrados[i].fone,
                alunosCadastrados[i].turmaSerie);
    }
    fclose(arquivo);
}

void carregarAlunosDeArquivo() {
    FILE* arquivo = fopen("alunos.txt", "r");

    totalAlunos = 0;
    while (fscanf(arquivo, "%s %d %s %s %d\n",
                  alunosCadastrados[totalAlunos].nome,
                  &alunosCadastrados[totalAlunos].matricula,
                  alunosCadastrados[totalAlunos].email,
                  &alunosCadastrados[totalAlunos].fone,
                  &alunosCadastrados[totalAlunos].turmaSerie) != EOF)
    {
        totalAlunos++;
    }
    fclose(arquivo);
}

void salvarFuncionariosEmArquivo()
{

    FILE* arquivo = fopen("funcionarios.txt", "w");

    for (int i = 0; i < totalFuncionarios; i++)
    {
        fprintf(arquivo, "%s %d %s %d %s %d\n",
                funcionariosCadastrados[i].nome,
                funcionariosCadastrados[i].matricula,
                funcionariosCadastrados[i].email,
                funcionariosCadastrados[i].telefone,
                funcionariosCadastrados[i].usuario,
                funcionariosCadastrados[i].senha);
    }
    fclose(arquivo);
}

void carregarFuncionariosDeArquivo()
{
    FILE* arquivo = fopen("funcionarios.txt", "r");

    totalFuncionarios = 0;
    while (fscanf(arquivo, "%s %d %s %d %s %d\n",
                  funcionariosCadastrados[totalFuncionarios].nome,
                  &funcionariosCadastrados[totalFuncionarios].matricula,
                  funcionariosCadastrados[totalFuncionarios].email,
                  &funcionariosCadastrados[totalFuncionarios].telefone,
                  funcionariosCadastrados[totalFuncionarios].usuario,
                  &funcionariosCadastrados[totalFuncionarios].senha) != EOF)
    {
        totalFuncionarios++;
    }
    fclose(arquivo);
}

void reservarArmario(int matriculaAluno, int numeroArmario, const char* dataRecebimento, const char* dataDevolucao) {
    // Verifique se há espaço para adicionar uma reserva
    if (totalReservas < RESERVAS) {
        Reserva novaReserva;
        novaReserva.matriculaAluno = matriculaAluno;
        novaReserva.numeroArmario = numeroArmario;
        strncpy(novaReserva.dataRecebimento, dataRecebimento, sizeof(novaReserva.dataRecebimento) - 1);
        strncpy(novaReserva.dataDevolucao, dataDevolucao, sizeof(novaReserva.dataDevolucao) - 1);

        // Adicione a nova reserva à lista de reservas
        reservas[totalReservas] = novaReserva;
        totalReservas++;

        salvarReservasEmArquivo();

        cout << "Armário reservado com sucesso para o aluno de matrícula " << matriculaAluno << "." << endl;
    } else {
        cout << "Não é possível fazer mais reservas. Limite de reservas atingido." << endl;
    }
}

void cadastrarAluno() {
    Aluno novoAluno;

    system("cls");
    cout << "\nCadastro de Aluno\n";
    cout << "Nome: ";
    cin.ignore();
    cin.getline(novoAluno.nome, 50);

    bool matriculaExistente = false;

    do {
        cout << "Matrícula: ";
        cin >> novoAluno.matricula;

        matriculaExistente = false;

        for (int i = 0; i < totalAlunos; i++) {
            if (novoAluno.matricula == alunosCadastrados[i].matricula) {
                matriculaExistente = true;
                cout << "Matrícula já está em uso. Escolha outra matrícula." << endl;
                break;
            }
        }

    } while (matriculaExistente);

        cout << "Email: ";
        cin >> novoAluno.email;

        cout << "Telefone: ";
        cin >> novoAluno.fone;

        cout << "Turma: ";
        cin >> novoAluno.turmaSerie;

    alunosCadastrados[totalAlunos] = novoAluno;
    totalAlunos++;
    salvarAlunosEmArquivo();

     int armarioDisponivel = -1;
    for (int i = 0; i < ARMARIOS; i++) {
        if (armarios[i].disponivel) {
            armarioDisponivel = i;
            armarios[i].disponivel = false; // Marcar o armário como ocupado
            break;
        }
    }

    if (armarioDisponivel != -1) {
        alunosCadastrados[totalAlunos] = novoAluno;
        totalAlunos++;
        salvarAlunosEmArquivo();
        cout << "Aluno cadastrado com sucesso. Armário atribuído: " << armarios[armarioDisponivel].numero << endl;

        // Agora, vamos chamar a função para reservar o armário
       // Após a parte do código que atribui um armário ao aluno, chame a função para reservar o armário
reservarArmario(novoAluno.matricula, armarios[armarioDisponivel].numero, "data_recebimento", "data_devolucao");

    } else {
        cout << "Não há armários disponíveis. O aluno não pode ser cadastrado." << endl;
    }
    system("pause");
}

void cadastrarFuncionario()
{
    Funcionario novoFuncionario;

    system("cls");
    cout << "\nCadastro de Funcionário\n\n";
    cout << "Informe o nome do funcionário: ";
    cin.ignore();
    cin.getline(novoFuncionario.nome, 50);
    bool matriculaExistente;

    do
    {
        cout << "Matrícula: ";
        cin >> novoFuncionario.matricula;

        matriculaExistente = false;

        for (int i = 0; i < totalFuncionarios; i++)
        {
            if (novoFuncionario.matricula == funcionariosCadastrados[i].matricula)
            {
                matriculaExistente = true;
                cout << "Matrícula já está em uso. Escolha outra matrícula." << endl;
                break;
            }
        }

    }
    while (matriculaExistente);


    cout << "Email: ";
    cin >> novoFuncionario.email;
    cout << "Telefone: ";
    cin >> novoFuncionario.telefone;


    bool usuarioExistente;
    do
    {
        cout << "Usuário: ";
        cin >> novoFuncionario.usuario;

        usuarioExistente = false;

        for (int i = 0; i < totalFuncionarios; i++)
        {
            if (strcmp(novoFuncionario.usuario, funcionariosCadastrados[i].usuario) == 0)
            {
                usuarioExistente = true;
                cout << "Usuário já está em uso. Escolha outro usuário." << endl;
                break;
            }
        }

    }
    while (usuarioExistente);

    cout << "Senha: ";
    cin >> novoFuncionario.senha;

    funcionariosCadastrados[totalFuncionarios] = novoFuncionario;
    totalFuncionarios++;

    system("cls");
    cout << "\nFuncionário cadastrado com sucesso.\n";
    system("pause");
    system("cls");
    salvarFuncionariosEmArquivo();
}

void editarFuncionario()
{
    system("cls");
    cout << "\nEditar Funcionário\n";

    cout << "Lista de Funcionários:\n";
    for (int i = 0; i < totalFuncionarios; i++)
    {
        cout << "Matrícula: " << funcionariosCadastrados[i].matricula << " - Nome: " << funcionariosCadastrados[i].nome << endl;
    }

    int matriculaEscolhida,opcao;
    cout << "\nDigite a Matrícula do funcionário que deseja editar: ";
    cin >> matriculaEscolhida;

    for (int i = 0; i < totalFuncionarios; i++)
    {
        if (funcionariosCadastrados[i].matricula == matriculaEscolhida)
        {
            cout << "Funcionário escolhido: " << funcionariosCadastrados[i].nome << endl;

            cout << "Digite o novo nome: ";
            cin.ignore();
            cin.getline(funcionariosCadastrados[i].nome, 50);

            bool matriculaExistente = false;

            do
            {
                cout << "Digite a nova matrícula: ";
                cin >> funcionariosCadastrados[i].matricula;

                matriculaExistente = false;

                for (int j = 0; j < totalFuncionarios; j++)
                {
                    if (funcionariosCadastrados[i].matricula == funcionariosCadastrados[j].matricula && i != j)
                    {
                        matriculaExistente = true;
                        cout << "Matrícula já está em uso. Escolha outra matrícula." << endl;
                        break;
                    }
                }

            }while (matriculaExistente);

            cout << "Digite o novo email: ";
            cin >> funcionariosCadastrados[i].email;

            cout << "Digite o novo telefone: ";
            cin >> funcionariosCadastrados[i].telefone;

            bool usuarioExistente = false;

            do
            {
                cout << "Digite um novo usuário: ";
                cin >> funcionariosCadastrados[i].matricula;

                usuarioExistente = false;

                for (int j = 0; j < totalFuncionarios; j++)
                {
                    if (funcionariosCadastrados[i].usuario == funcionariosCadastrados[j].usuario && i != j)
                    {
                        usuarioExistente = true;
                        cout << "Usuário já está em uso. Escolha outro usuário." << endl;
                        break;
                    }
                }
            }while (usuarioExistente);

            cout << "Digite a nova senha: ";
            cin >> funcionariosCadastrados[i].senha;



            cout << "Funcionário editado com sucesso!" << endl;
            break;
        }
    }

    system("pause");
}

void visualizarFuncionarios()
{
    system("cls");

    cout << "\nFuncionários Cadastrados:\n";
    for (int i = 0; i < totalFuncionarios; i++)
    {
        cout << "Nome: " << funcionariosCadastrados[i].nome << "\t";
        cout << "Matrícula: " << funcionariosCadastrados[i].matricula << "\t";
        cout << "Email: " << funcionariosCadastrados[i].email << "\t";
        cout << "Telefone: " << funcionariosCadastrados[i].telefone << "\t";
        cout << "Usuário: " << funcionariosCadastrados[i].usuario << "\t";
        cout << "Senha: " << funcionariosCadastrados[i].senha << "\t";
        cout << "\n------------------------------------------------------\n";
    }

    system("pause");
}

void menuAlunos()
{
    system("cls");
    int opcaoAlunos;

    do
    {
        system("cls");
        cout << "\nMenu Alunos\n";
        cout << "Opções:\n";
        cout << "[1] Adicionar\n";
        cout << "[2] Editar\n";
        cout << "[3] Visualizar\n";
        cout << "[4] Excluir\n";
        cout << "[5] Voltar\n";
        cout << "Escolha uma opção do menu: ";
        cin >> opcaoAlunos;

        switch (opcaoAlunos)
        {
        case 1:
            cadastrarAluno();
            break;
        case 2:

            break;
        case 3:

            break;
        case 4:

            break;
        case 5:
            system("cls");
            break;
        default:
            cout << "Opção inválida. Por favor, escolha uma opção do menu." << endl;
            break;
        }
    }
    while (opcaoAlunos != 5);
}

void menuFuncionarios()
{
    int opcaoFuncionarios;

    do
    {
        system("cls");
        cout << "\nMenu Funcionários\n";
        cout << "Opções:\n";
        cout << "[1] Adicionar\n";
        cout << "[2] Editar\n";
        cout << "[3] Visualizar\n";
        cout << "[4] Excluir\n";
        cout << "[5] Voltar\n";
        cout << "Escolha uma opção do menu: ";
        cin >> opcaoFuncionarios;

        switch (opcaoFuncionarios)
        {
        case 1:
            cadastrarFuncionario();
            break;
        case 2:
            cout << "Opção Editar Funcionário selecionada." << endl;
            editarFuncionario();
            break;
        case 3:
            cout << "Opção Visualizar Funcionário selecionada." << endl;
            visualizarFuncionarios();
            break;
        case 4:
            cout << "Opção Excluir Funcionário selecionada." << endl;
            system("pause");
            break;
        case 5:
            system("cls");
            break;
        default:
            cout << "Opção inválida. Por favor, escolha uma opção do menu." << endl;
            break;
        }
    }
    while (opcaoFuncionarios != 5);
}

void menuPrincipal()
{
    int opcaoMenu;

    do
    {
        cout << "Menu Principal\n\n";
        cout << "[1] Funcionários\n";
        cout << "[2] Alunos\n";
        cout << "[3] Armários\n";
        cout << "[4] Reservas\n";
        cout << "[5] Voltar\n";
        cout << "Escolha uma opção do menu: ";
        cin >> opcaoMenu;

        switch (opcaoMenu)
        {
        case 1:
            menuFuncionarios();
            break;
        case 2:
            cout << "Opção Alunos selecionada." << endl;
            menuAlunos();
            break;
        case 3:
            cout << "Opção Armários selecionada." << endl;
            system("pause");
            break;
        case 4:
            cout << "Opção Reservas selecionada." << endl;
            system("pause");
            break;
        case 5:
            system("cls");
            break;
        default:
            system("cls");
            cout << "Opção inválida. Por favor, escolha uma opção do menu." << endl;
            break;
        }
    }
    while (opcaoMenu != 5);
}

void fazerLogin()
{
    string nomeUsuario, senha;

    cout << "Login\n\n";
    cout << "Nome de Usuário: ";
    cin >> nomeUsuario;
    cout << "Senha: ";
    cin >> senha;

    bool loginValido = false;

    for (int i = 0; i < totalFuncionarios; i++)
    {
        if (nomeUsuario == funcionariosCadastrados[i].usuario && senha == to_string(funcionariosCadastrados[i].senha))
        {
            loginValido = true;
            cout << "Login bem-sucedido como " << funcionariosCadastrados[i].nome << endl;
            system("pause");
            system("cls");
            menuPrincipal();
            break;
        }
    }

    if (!loginValido)
    {
        cout << "Credenciais incorretas. Acesso negado!\n" << endl;
        system("pause");
        system("cls");
    }
}


int main()
{
    setlocale(LC_ALL, "Portuguese");
    inicializarArmarios();
    carregarArmariosDeArquivo();
    carregarFuncionariosDeArquivo();
    carregarAlunosDeArquivo();
    int opcao;

    do
    {
        cout << "Sistema de Consulta e Reserva de Armários\n\n";
        cout << "[1] Entrar\n";
        cout << "[2] Cadastrar\n";
        cout << "[3] Sair\n";
        cout << "Escolha uma opção: ";
        cin >> opcao;

        switch (opcao)
        {
        case 1:
        {
            system("cls");
            fazerLogin();
            break;
        }
        case 2:
            system("cls");
            cadastrarFuncionario();
            main();
            break;
        case 3:
            system("cls");
            cout << "Até logo.\n";
            break;
        default:
            system("cls");
            cout << "Opção inválida. Por favor, escolha novamente.\n" << endl;
            system("pause");
            system("cls");
            break;
        }
    }
    while(opcao!=3);

    return 0;
}
