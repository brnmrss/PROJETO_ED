
#include <iostream>
#include <string>
#include <ctime>
#include <cstring>
#include <locale.h>
#include <cstdlib>
#include <stdlib.h>
#include <stdio.h>
#include <windows.h>

#define FUNCIONARIOS 10
#define ALUNOS 10
#define ARMARIOS 1
#define RESERVAS 100
#define ALUNOS_ESPERA 100 // Define o tamanho máximo da lista de espera


using namespace std;

HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
COORD CursorPosition;

void gotoxy(int x, int y){
  CursorPosition.X = x; // Locates column
  CursorPosition.Y = y; // Locates Row
  SetConsoleCursorPosition(console,CursorPosition); // Sets position for next thing to be printed
}


typedef struct {
    int numero;
    bool disponivel;
    bool estado;
    int matriculaAlunoAtual;
}Armario;

typedef struct {
    int codigo;
    int matriculaAluno;
    int matriculaFuncionario;
    int numeroArmario;
    char dataRecebimento[11];
    char dataDevolucao[11] = "25/12/2023";
} Reserva;

typedef struct
{
    char nome[50], usuario[50], email[50],telefone[11];
    int matricula, senha;
} Funcionario;

typedef struct
{
    char nome[50], email[50],fone[11];
    int matricula, turmaSerie;
} Aluno;

int matriculaFuncionarioLogado = -1;

//VETORES
Funcionario funcionariosCadastrados[FUNCIONARIOS];
int totalFuncionarios = 0;

Aluno alunosCadastrados[ALUNOS];
int totalAlunos = 0;

Reserva reservas[RESERVAS];
int totalReservas = 0;

Armario armarios[ARMARIOS];


Aluno alunosEspera[ALUNOS_ESPERA]; // Vetor para armazenar os alunos em espera
int totalAlunosEspera = 0; // Variável para acompanhar o número de alunos em espera

void salvarFilaEsperaEmArquivo() {
    FILE* arquivo = fopen("fila_espera.txt", "w");

    if (arquivo != NULL) {
        for (int i = 0; i < totalAlunosEspera; i++) {
            fprintf(arquivo, "%d\n", alunosEspera[i].matricula);
        }
        fclose(arquivo);
    } else {
        cout << "Erro ao abrir o arquivo da fila de espera." << endl;
    }
}


void carregarFilaEsperaDeArquivo() {
    FILE* arquivo = fopen("fila_espera.txt", "r");

    if (arquivo != NULL) {
        totalAlunosEspera = 0;
        while (fscanf(arquivo, "%d\n", &alunosEspera[totalAlunosEspera].matricula) != EOF) {
            totalAlunosEspera++;
        }
        fclose(arquivo);
    } else {
        cout << "Erro ao abrir o arquivo da fila de espera." << endl;
    }
}



void salvarReservasEmArquivo() {
    FILE* arquivo = fopen("reservas.txt", "w");

    if (arquivo != NULL) {
        for (int i = 0; i < totalReservas; i++) {
            fprintf(arquivo, "%d %d %d %s %s\n",
        reservas[i].matriculaFuncionario,
        reservas[i].matriculaAluno,
        reservas[i].numeroArmario,
        reservas[i].dataRecebimento,
        reservas[i].dataDevolucao);
        }
        fclose(arquivo);
    } else {
        cout << "Erro ao abrir o arquivo de reservas." << endl;
    }
}

void atualizarStatusArmario(int numeroArmario, bool novoStatus) {
    // Abra o arquivo de armários para leitura e escrita
    FILE* arquivo = fopen("armarios.txt", "r+");

    if (arquivo != NULL) {
        Armario armario;

        // Percorra o arquivo até encontrar o armário com o número correspondente
        while (fscanf(arquivo, "%d %d %d\n", &armario.numero, &armario.disponivel, &armario.estado) != EOF) {
            if (armario.numero == numeroArmario) {
                // Atualize o status do armário
                armario.disponivel = novoStatus;

                // Volte para o início do registro no arquivo
                fseek(arquivo, -sizeof(Armario), SEEK_CUR);

                // Escreva o registro atualizado no arquivo
                fprintf(arquivo, "%d %d %d\n", armario.numero, armario.disponivel, armario.estado);

                break;  // Saia do loop após encontrar o armário
            }
        }

        fclose(arquivo);
    } else {
        cout << "Erro ao abrir o arquivo de armários." << endl;
    }
}

void salvarArmariosEmArquivo() {
    FILE* arquivo = fopen("armarios.txt", "w");

    if (arquivo != NULL) {
        for (int i = 0; i < ARMARIOS; i++) {
            fprintf(arquivo, "%d %d %d %d\n",
                    armarios[i].numero,
                    armarios[i].disponivel,
                    armarios[i].estado,
                    armarios[i].matriculaAlunoAtual);
        }
        fclose(arquivo);
    } else {
        cout << "Erro ao abrir o arquivo de armários." << endl;
    }
}


void carregarArmariosDeArquivo() {
    FILE* arquivo = fopen("armarios.txt", "r");

    if (arquivo != NULL) {
        for (int i = 0; i < ARMARIOS; i++) {
            fprintf(arquivo, "%d %d %d\n",
                    armarios[i].numero,
                    armarios[i].disponivel,
                    armarios[i].estado);
        }
        fclose(arquivo);
    } else {
        cout << "Erro ao abrir o arquivo de armários." << endl;
    }
}

void inicializarArmarios() {
    FILE* arquivo = fopen("armarios.txt", "r");

    if (arquivo == NULL) {
        // Arquivo não existe, então inicialize os armários
        for (int i = 0; i < ARMARIOS; i++) {
            armarios[i].numero = i + 1; // Número do armário
            armarios[i].disponivel = true; // Armário inicialmente disponível
            armarios[i].estado = false; // Estado inicial do armário
        }

        // Salve as informações dos armários em um arquivo
        salvarArmariosEmArquivo();
    } else {
        // Arquivo existe, então carregue as informações dos armários
        for (int i = 0; i < ARMARIOS; i++) {
            if (fscanf(arquivo, "%d %d %d\n",
                        &armarios[i].numero,
                        &armarios[i].disponivel,
                        &armarios[i].estado) == EOF) {
                break;
            }
        }
        fclose(arquivo);
    }
}


void salvarAlunosEmArquivo() {

    FILE* arquivo = fopen("alunos.txt", "w");

    for (int i = 0; i < totalAlunos; i++)
    {
        fprintf(arquivo, "%s %d %s %s %d\n",
                alunosCadastrados[i].nome,
                alunosCadastrados[i].matricula,
                alunosCadastrados[i].email,
                alunosCadastrados[i].fone,
                alunosCadastrados[i].turmaSerie);
    }
    fclose(arquivo);
}

void carregarAlunosDeArquivo() {
    FILE* arquivo = fopen("alunos.txt", "r");

    totalAlunos = 0;
    while (fscanf(arquivo, "%s %d %s %s %d\n",
                  alunosCadastrados[totalAlunos].nome,
                  &alunosCadastrados[totalAlunos].matricula,
                  alunosCadastrados[totalAlunos].email,
                  &alunosCadastrados[totalAlunos].fone,
                  &alunosCadastrados[totalAlunos].turmaSerie) != EOF)
    {
        totalAlunos++;
    }
    fclose(arquivo);
}

void salvarFuncionariosEmArquivo()
{

    FILE* arquivo = fopen("funcionarios.txt", "w");

    for (int i = 0; i < totalFuncionarios; i++)
    {
        fprintf(arquivo, "%s %d %s %d %s %d\n",
                funcionariosCadastrados[i].nome,
                funcionariosCadastrados[i].matricula,
                funcionariosCadastrados[i].email,
                funcionariosCadastrados[i].telefone,
                funcionariosCadastrados[i].usuario,
                funcionariosCadastrados[i].senha);
    }
    fclose(arquivo);
}

void carregarFuncionariosDeArquivo()
{
    FILE* arquivo = fopen("funcionarios.txt", "r");

    totalFuncionarios = 0;
    while (fscanf(arquivo, "%s %d %s %d %s %d\n",
                  funcionariosCadastrados[totalFuncionarios].nome,
                  &funcionariosCadastrados[totalFuncionarios].matricula,
                  funcionariosCadastrados[totalFuncionarios].email,
                  &funcionariosCadastrados[totalFuncionarios].telefone,
                  funcionariosCadastrados[totalFuncionarios].usuario,
                  &funcionariosCadastrados[totalFuncionarios].senha) != EOF)
    {
        totalFuncionarios++;
    }
    fclose(arquivo);
}

void reservarArmario(int matriculaAluno, int numeroArmario) {
    // Verifique se há espaço para adicionar uma reserva
    if (totalReservas < RESERVAS) {
        Reserva novaReserva;
        novaReserva.matriculaAluno = matriculaAluno;
        novaReserva.matriculaFuncionario = matriculaFuncionarioLogado;
        novaReserva.numeroArmario = numeroArmario;
        strcpy(novaReserva.dataDevolucao, "25/12/2023");

        time_t now = time(0);
        tm* timeinfo = localtime(&now);
        char dataAtual[11];
        strftime(dataAtual, sizeof(dataAtual), "%d/%m/%Y", timeinfo);
        strncpy(novaReserva.dataRecebimento, dataAtual, sizeof(novaReserva.dataRecebimento) - 1);

        // Adicione a nova reserva à lista de reservas
        reservas[totalReservas] = novaReserva;
        totalReservas++;

        // Atualize o status do armário
        int armarioDisponivel = -1;
        for (int i = 0; i < ARMARIOS; i++) {
            if (armarios[i].numero == numeroArmario) {
                armarios[i].disponivel = false; // Marcar o armário como ocupado
                armarios[i].matriculaAlunoAtual = matriculaAluno; // Atribuir ao aluno
                break;
            }
        }

        salvarReservasEmArquivo();
        salvarArmariosEmArquivo();

        cout << "Armário reservado com sucesso para o aluno de matrícula " << matriculaAluno << "." << endl;
    } else {
        cout << "Não é possível fazer mais reservas. Limite de reservas atingido." << endl;
    }
}


void cadastrarAluno() {
    Aluno novoAluno;

    system("cls");
    cout << "\nCadastro de Aluno\n";
    cout << "Nome: ";
    cin.ignore();
    cin.getline(novoAluno.nome, 50);

    bool matriculaExistente = false;

    do {
        cout << "Matrícula: ";
        cin >> novoAluno.matricula;

        matriculaExistente = false;

        for (int i = 0; i < totalAlunos; i++) {
            if (novoAluno.matricula == alunosCadastrados[i].matricula) {
                matriculaExistente = true;
                cout << "Matrícula já está em uso. Escolha outra matrícula." << endl;
                break;
            }
        }

    } while (matriculaExistente);

        cout << "Email: ";
        cin >> novoAluno.email;

        cout << "Telefone: ";
        cin >> novoAluno.fone;

        cout << "Turma: ";
        cin >> novoAluno.turmaSerie;

    alunosCadastrados[totalAlunos] = novoAluno;
    totalAlunos++;
    salvarAlunosEmArquivo();

     int armarioDisponivel = -1;
    for (int i = 0; i < ARMARIOS; i++) {
        if (armarios[i].disponivel) {
            armarioDisponivel = i;
            armarios[i].disponivel = false; // Marcar o armário como ocupado
            break;
        }
    }

    if (armarioDisponivel != -1) {
        alunosCadastrados[totalAlunos] = novoAluno;
        totalAlunos++;
        salvarAlunosEmArquivo();
        cout << "Aluno cadastrado com sucesso. Armário atribuído: " << armarios[armarioDisponivel].numero << endl;

    reservarArmario(novoAluno.matricula,armarios[armarioDisponivel].numero);

    } else {

        if (totalAlunosEspera < ALUNOS_ESPERA) {
            alunosEspera[totalAlunosEspera] = novoAluno;
            totalAlunosEspera++;
            cout << "Não há armários disponíveis. O aluno foi adicionado à lista de espera." << endl;
            salvarFilaEsperaEmArquivo();
        } else {
            cout << "Não há armários disponíveis e a lista de espera está cheia. Não é possível adicionar mais alunos em espera." << endl;
        }
    }
    system("pause");
}

void cadastrarFuncionario()
{
    Funcionario novoFuncionario;

    system("cls");
    cout << "\nCadastro de Funcionário\n\n";
    cout << "Informe o nome do funcionário: ";
    cin.ignore();
    cin.getline(novoFuncionario.nome, 50);
    bool matriculaExistente;

    do
    {
        cout << "Matrícula: ";
        cin >> novoFuncionario.matricula;

        matriculaExistente = false;

        for (int i = 0; i < totalFuncionarios; i++)
        {
            if (novoFuncionario.matricula == funcionariosCadastrados[i].matricula)
            {
                matriculaExistente = true;
                cout << "Matrícula já está em uso. Escolha outra matrícula." << endl;
                break;
            }
        }

    }
    while (matriculaExistente);


    cout << "Email: ";
    cin >> novoFuncionario.email;
    cout << "Telefone: ";
    cin >> novoFuncionario.telefone;


    bool usuarioExistente;
    do
    {
        cout << "Usuário: ";
        cin >> novoFuncionario.usuario;

        usuarioExistente = false;

        for (int i = 0; i < totalFuncionarios; i++)
        {
            if (strcmp(novoFuncionario.usuario, funcionariosCadastrados[i].usuario) == 0)
            {
                usuarioExistente = true;
                cout << "Usuário já está em uso. Escolha outro usuário." << endl;
                break;
            }
        }

    }
    while (usuarioExistente);

    cout << "Senha: ";
    cin >> novoFuncionario.senha;

    funcionariosCadastrados[totalFuncionarios] = novoFuncionario;
    totalFuncionarios++;

    system("cls");
    cout << "\nFuncionário cadastrado com sucesso.\n";
    system("pause");
    system("cls");
    salvarFuncionariosEmArquivo();
}

void editarFuncionario()
{
    system("cls");
    cout << "\nEditar Funcionário\n";

    cout << "Lista de Funcionários:\n";
    for (int i = 0; i < totalFuncionarios; i++)
    {
        cout << "Matrícula: " << funcionariosCadastrados[i].matricula << " - Nome: " << funcionariosCadastrados[i].nome << endl;
    }

    int matriculaEscolhida,opcao;
    cout << "\nDigite a Matrícula do funcionário que deseja editar: ";
    cin >> matriculaEscolhida;

    for (int i = 0; i < totalFuncionarios; i++)
    {
        if (funcionariosCadastrados[i].matricula == matriculaEscolhida)
        {
            cout << "Funcionário escolhido: " << funcionariosCadastrados[i].nome << endl;

            cout << "Digite o novo nome: ";
            cin.ignore();
            cin.getline(funcionariosCadastrados[i].nome, 50);

            bool matriculaExistente = false;

            do
            {
                cout << "Digite a nova matrícula: ";
                cin >> funcionariosCadastrados[i].matricula;

                matriculaExistente = false;

                for (int j = 0; j < totalFuncionarios; j++)
                {
                    if (funcionariosCadastrados[i].matricula == funcionariosCadastrados[j].matricula && i != j)
                    {
                        matriculaExistente = true;
                        cout << "Matrícula já está em uso. Escolha outra matrícula." << endl;
                        break;
                    }
                }

            }while (matriculaExistente);

            cout << "Digite o novo email: ";
            cin >> funcionariosCadastrados[i].email;

            cout << "Digite o novo telefone: ";
            cin >> funcionariosCadastrados[i].telefone;

            bool usuarioExistente = false;

            do
            {
                cout << "Digite um novo usuário: ";
                cin >> funcionariosCadastrados[i].matricula;

                usuarioExistente = false;

                for (int j = 0; j < totalFuncionarios; j++)
                {
                    if (funcionariosCadastrados[i].usuario == funcionariosCadastrados[j].usuario && i != j)
                    {
                        usuarioExistente = true;
                        cout << "Usuário já está em uso. Escolha outro usuário." << endl;
                        break;
                    }
                }
            }while (usuarioExistente);

            cout << "Digite a nova senha: ";
            cin >> funcionariosCadastrados[i].senha;



            cout << "Funcionário editado com sucesso!" << endl;
            break;
        }
    }

    system("pause");
}

void visualizarFuncionarios()
{
    system("cls");

    carregarFuncionariosDeArquivo(); // Carregar funcionários apenas uma vez no início.
    system("cls");
    gotoxy(1, 1);
    cout << "---------------------------------------------------------------------------------------------------------------";
    gotoxy(1, 2);
    cout << "================================================FUNCIONARIO====================================================";
    gotoxy(1, 3);
    cout << "---------------------------------------------------------------------------------------------------------------";
    gotoxy(7, 4);
    cout << "Nome";
    gotoxy(45, 4);
    cout << "Email";
    gotoxy(65, 4);
    cout << "Matricula";
    gotoxy(85, 4);
    cout << "Contato";
    gotoxy(105, 4);
    cout << "Usuario";
    gotoxy(1, 5);
    cout << "---------------------------------------------------------------------------------------------------------------";

    for (int i = 0; i < totalFuncionarios; i++) {
        gotoxy(6, 6 + i);
        printf("%s", funcionariosCadastrados[i].nome);
        gotoxy(36, 6 + i);
        printf("%s", funcionariosCadastrados[i].email);
        gotoxy(66, 6 + i);
        printf("%d", funcionariosCadastrados[i].matricula);
        gotoxy(86, 6 + i);
        printf("%d", funcionariosCadastrados[i].telefone);
        gotoxy(106, 6 + i);
        printf("%s", funcionariosCadastrados[i].usuario);

    }
    cout << "\n";
    cout << "================================================================================================================\n";
    system("pause");
}

void menuAlunos()
{
    system("cls");
    int opcaoAlunos;

    do
    {
        system("cls");
        cout << "\nMenu Alunos\n";
        cout << "Opções:\n";
        cout << "[1] Adicionar\n";
        cout << "[2] Editar\n";
        cout << "[3] Visualizar\n";
        cout << "[4] Excluir\n";
        cout << "[5] Voltar\n";
        cout << "Escolha uma opção do menu: ";
        cin >> opcaoAlunos;

        switch (opcaoAlunos)
        {
        case 1:
            cadastrarAluno();
            break;
        case 2:

            break;
        case 3:

            break;
        case 4:

            break;
        case 5:
            system("cls");
            break;
        default:
            cout << "Opção inválida. Por favor, escolha uma opção do menu." << endl;
            break;
        }
    }
    while (opcaoAlunos != 5);
}

void menuFuncionarios()
{
    int opcaoFuncionarios;

    do
    {
        system("cls");
        cout << "\nMenu Funcionários\n";
        cout << "Opções:\n";
        cout << "[1] Adicionar\n";
        cout << "[2] Editar\n";
        cout << "[3] Visualizar\n";
        cout << "[4] Excluir\n";
        cout << "[5] Voltar\n";
        cout << "Escolha uma opção do menu: ";
        cin >> opcaoFuncionarios;

        switch (opcaoFuncionarios)
        {
        case 1:
            cadastrarFuncionario();
            break;
        case 2:
            cout << "Opção Editar Funcionário selecionada." << endl;
            editarFuncionario();
            break;
        case 3:
            cout << "Opção Visualizar Funcionário selecionada." << endl;
            visualizarFuncionarios();
            break;
        case 4:
            cout << "Opção Excluir Funcionário selecionada." << endl;
            system("pause");
            break;
        case 5:
            system("cls");
            break;
        default:
            cout << "Opção inválida. Por favor, escolha uma opção do menu." << endl;
            break;
        }
    }
    while (opcaoFuncionarios != 5);
}



void visualizarFilaEspera() {
    system("cls");
    cout << "Fila de Espera de Alunos:\n";

    if (totalAlunosEspera == 0) {
        cout << "Nenhum aluno aguardando na fila de espera." << endl;
    } else {
        for (int i = 0; i < totalAlunosEspera; i++) {
            cout << "Nome: " << alunosEspera[i].nome;
            cout << "\tMatrícula: " << alunosEspera[i].matricula << endl;

            cout << "-------------------------" << endl;
        }
    }

    system("pause");
}

void visualizarArmarios() {
    system("cls");
    cout << "Lista de Armários:\n";

    for (int i = 0; i < ARMARIOS; i++) {
        cout << "Armário " << armarios[i].numero << ": ";

        if (armarios[i].disponivel) {
            cout << "Disponível" << endl;
        } else {
            cout << "Ocupado por ";

            // Encontrar o aluno correspondente pelo número da matrícula
            int matriculaAlunoAtual = armarios[i].matriculaAlunoAtual;
            bool alunoEncontrado = false;

            for (int j = 0; j < totalAlunos; j++) {
                if (alunosCadastrados[j].matricula == matriculaAlunoAtual) {
                    cout << alunosCadastrados[j].nome << " (Matrícula: " << matriculaAlunoAtual << ")" << endl;
                    alunoEncontrado = true;
                    break;
                }
            }

            if (!alunoEncontrado) {
                cout << "Aluno não encontrado" << endl;
            }
        }
    }

    system("pause");
}

void editarArmario() {
    system("cls");
    cout << "Editar Armário\n";
    cout << "Lista de Armários:\n";

    for (int i = 0; i < ARMARIOS; i++) {
        cout << "Armário " << armarios[i].numero << ": ";

        if (armarios[i].disponivel) {
            cout << "Disponível" << endl;
        } else {
            cout << "Ocupado por ";

            // Encontrar o aluno correspondente pelo número da matrícula
            int matriculaAlunoAtual = armarios[i].matriculaAlunoAtual;
            bool alunoEncontrado = false;

            for (int j = 0; j < totalAlunos; j++) {
                if (alunosCadastrados[j].matricula == matriculaAlunoAtual) {
                    cout << alunosCadastrados[j].nome << " (Matrícula: " << matriculaAlunoAtual << ")" << endl;
                    alunoEncontrado = true;
                    break;
                }
            }

            if (!alunoEncontrado) {
                cout << "Aluno não encontrado" << endl;
            }
        }
    }

    int numeroArmario;
    cout << "Digite o número do armário que deseja editar: ";
    cin >> numeroArmario;

    bool armarioEncontrado = false;
    for (int i = 0; i < ARMARIOS; i++) {
        if (armarios[i].numero == numeroArmario) {
            armarioEncontrado = true;

            // Não permitir a edição do número do armário
            cout << "Armário encontrado: " << armarios[i].numero << endl;

            // Verificar se o armário está disponível ou não
            if (armarios[i].disponivel) {
                cout << "Este armário está disponível. Deseja torná-lo indisponível? (S/N): ";
                char resposta;
                cin >> resposta;

                if (resposta == 'S' || resposta == 's') {
                    // Verificar se há alunos na fila de espera
                    if (totalAlunosEspera > 0) {
                        // Atribuir o armário ao próximo aluno da fila
                        armarios[i].disponivel = false;
                        armarios[i].matriculaAlunoAtual = alunosEspera[0].matricula;

                        // Remover o aluno da fila de espera
                        for (int j = 0; j < totalAlunosEspera - 1; j++) {
                            alunosEspera[j] = alunosEspera[j + 1];
                        }
                        totalAlunosEspera--;

                        cout << "Armário tornou-se indisponível e foi atribuído a um aluno da fila de espera." << endl;
                    } else {
                        cout << "Não há alunos na fila de espera. O armário continuará disponível." << endl;
                    }
                } else {
                    cout << "Nenhuma alteração feita." << endl;
                }
            } else {
                // Se o armário estiver ocupado, ele pode ser editado
                cout << "Este armário está ocupado. Deseja torná-lo disponível? (S/N): ";
                char resposta;
                cin >> resposta;

                if (resposta == 'S' || resposta == 's') {
                    // Tornar o armário disponível
                    armarios[i].disponivel = true;
                    armarios[i].matriculaAlunoAtual = -1; // Nenhum aluno está associado a este armário agora

                    // Verificar se há alunos na fila de espera
                    if (totalAlunosEspera > 0) {
                        // Atribuir o armário ao próximo aluno da fila
                        armarios[i].disponivel = false;
                        armarios[i].matriculaAlunoAtual = alunosEspera[0].matricula;

                        // Remover o aluno da fila de espera
                        for (int j = 0; j < totalAlunosEspera - 1; j++) {
                            alunosEspera[j] = alunosEspera[j + 1];
                        }
                        totalAlunosEspera--;

                        cout << "Armário tornou-se disponível e foi atribuído a um aluno da fila de espera." << endl;
                        salvarArmariosEmArquivo();
                    } else {
                        cout << "Armário tornou-se disponível." << endl;
                    }
                } else {
                    cout << "Nenhuma alteração feita." << endl;
                }
            }

            break;
        }
    }

    if (!armarioEncontrado) {
        cout << "Armário não encontrado." << endl;
    }

    system("pause");
}



void menuArmarios() {
    int opcaoArmarios;
    do {
        system("cls");
        cout << "\nMenu Armários\n";
        cout << "Opções:\n";
        cout << "[1] Visualizar Armários\n";
        cout << "[2] Editar Armários\n";
        cout << "[3] Visualizar Fila de Espera\n";
        cout << "[4] Voltar\n";
        cout << "Escolha uma opção do menu: ";
        cin >> opcaoArmarios;

        switch (opcaoArmarios) {
        case 1:
            // Implemente a visualização dos armários aqui
            visualizarArmarios();
            break;
        case 2:
            // Implemente a edição dos armários aqui
            editarArmario();
            break;
        case 3:
            // Implemente a visualização da fila de espera dos alunos aqui
            visualizarFilaEspera();
            break;
        case 4:
            return; // Retorna ao menu principal
        default:
            cout << "Opção inválida. Por favor, escolha uma opção do menu." << endl;
            break;
        }
    } while (opcaoArmarios != 4);
}

void menuPrincipal()
{
    int opcaoMenu;

    do
    {
        cout << "Menu Principal\n\n";
        cout << "[1] Funcionários\n";
        cout << "[2] Alunos\n";
        cout << "[3] Armários\n";
        cout << "[4] Reservas\n";
        cout << "[5] Voltar\n";
        cout << "Escolha uma opção do menu: ";
        cin >> opcaoMenu;

        switch (opcaoMenu)
        {
        case 1:
            menuFuncionarios();
            break;
        case 2:
            cout << "Opção Alunos selecionada." << endl;
            menuAlunos();
            break;
        case 3:
            menuArmarios();
            system("pause");
            break;
        case 4:
            cout << "Opção Reservas selecionada." << endl;
            system("pause");
            break;
        case 5:
            system("cls");
            break;
        default:
            system("cls");
            cout << "Opção inválida. Por favor, escolha uma opção do menu." << endl;
            break;
        }
    }
    while (opcaoMenu != 5);
}

void fazerLogin()
{
    string nomeUsuario, senha;

    cout << "Login\n\n";
    cout << "Nome de Usuário: ";
    cin >> nomeUsuario;
    cout << "Senha: ";
    cin >> senha;

    bool loginValido = false;


    for (int i = 0; i < totalFuncionarios; i++)
    {
        if (nomeUsuario == funcionariosCadastrados[i].usuario && senha == to_string(funcionariosCadastrados[i].senha))
        {
            loginValido = true;
            matriculaFuncionarioLogado = funcionariosCadastrados[i].matricula;
            cout << "Login bem-sucedido como " << funcionariosCadastrados[i].nome << endl;
            system("pause");
            system("cls");
            menuPrincipal();
            break;
        }
    }

    if (!loginValido)
    {
        cout << "Credenciais incorretas. Acesso negado!\n" << endl;
        system("pause");
        system("cls");
    }
}


int main()
{
    setlocale(LC_ALL, "Portuguese");
    inicializarArmarios();
    carregarArmariosDeArquivo();
    carregarFuncionariosDeArquivo();
    carregarAlunosDeArquivo();
    carregarFilaEsperaDeArquivo();
    int opcao;

    do
    {
        cout << "Sistema de Consulta e Reserva de Armários\n\n";
        cout << "[1] Entrar\n";
        cout << "[2] Cadastrar\n";
        cout << "[3] Sair\n";
        cout << "Escolha uma opção: ";
        cin >> opcao;

        switch (opcao)
        {
        case 1:
        {
            system("cls");
            fazerLogin();
            break;
        }
        case 2:
            system("cls");
            cadastrarFuncionario();
            main();
            break;
        case 3:
            system("cls");
            cout << "Até logo.\n";
            break;
        default:
            system("cls");
            cout << "Opção inválida. Por favor, escolha novamente.\n" << endl;
            system("pause");
            system("cls");
            break;
        }
    }
    while(opcao!=3);

    return 0;
}
