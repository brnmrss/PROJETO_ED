#include <iostream>
#include <cstring>
#include <windows.h>
#include <locale.h>
#define FUNCIONARIO 5
#define ALUNO 100
#define ARMARIO 1
#define RESERVA 100
#define FILA 100
using namespace std;

int matriculaFuncionarioLogado = -1;

// Definições das estruturas
typedef struct
{
    int matricula;
    char nome[50];
    char email[50];
    char fone[15];
    char turmaSerie[20];
} Aluno;

typedef struct
{
    int matricula;
    char nome[50];
    char usuario[20];
    char senha[20];
    char email[50];
    char fone[15];
} Funcionario;

typedef struct
{
    int numero;
    bool disponivel;
    bool estado;
} Armario;

typedef struct
{
    int codigo;
    int matAluno;
    int matFunc;
    int numArmario;
    char dataRec[11];
    char dataDev[11];
} Reserva;


Aluno alunosCadastrados[ALUNO];
Funcionario funcionariosCadastrados[FUNCIONARIO];
Armario armariosCadastrados[ARMARIO];
Reserva reservasCadastradas[RESERVA];
Aluno alunoFila[FILA];

// Contadores globais
int totalAlunos = 0;
int totalFuncionarios = 0;
int totalArmarios = 0;
int totalReservas = 0;
int totalAlunoFila = 0;


void gotoxy(int x, int y)
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}


void salvarAlunosFila()
{
    FILE *arquivo;
    arquivo = fopen("alunosfila.txt", "w");

    if (arquivo == NULL)
    {
        cout << "Erro ao abrir o arquivo!" << endl;
        return;
    }

    for (int i = 0; i < totalAlunoFila; i++)
    {
        fprintf(arquivo, "%d\n%s\n%s\n%s\n%s\n",
                alunoFila[i].matricula,
                alunoFila[i].nome,
                alunoFila[i].email,
                alunoFila[i].fone,
                alunoFila[i].turmaSerie);
    }

    fclose(arquivo);

}

//RESERVAS
//RESERVAS
//RESERVAS
//RESERVAS
//RESERVAS
//RESERVAS

void salvarReservas()
{
    FILE *arquivo;
    arquivo = fopen("reservas.txt", "w");

    if (arquivo == NULL)
    {
        cout << "Erro ao abrir o arquivo de reservas!" << endl;
        return;
    }

    for (int i = 0; i < totalReservas; i++)
    {
        fprintf(arquivo, "%d\n", reservasCadastradas[i].codigo);
        fprintf(arquivo, "%d\n", reservasCadastradas[i].matAluno);
        fprintf(arquivo, "%d\n", reservasCadastradas[i].matFunc);
        fprintf(arquivo, "%d\n", reservasCadastradas[i].numArmario);
        fprintf(arquivo, "%s\n", reservasCadastradas[i].dataRec);
        fprintf(arquivo, "%s\n", reservasCadastradas[i].dataDev);
    }

    fclose(arquivo);

}

void carregarReservas()
{
    FILE *arquivo;
    arquivo = fopen("reservas.txt", "r");

    if (arquivo == NULL)
    {
        cout << "Arquivo 'reservas.txt' nao encontrado. Nenhuma reserva carregada." << endl;
        return;
    }

    // Limpar as reservas antes de carregar
    totalReservas = 0;

    while (!feof(arquivo))
    {
        Reserva novaReserva;

        if (fscanf(arquivo, "%d\n", &novaReserva.codigo) != 1)
        {
            break;
        }

        if (fscanf(arquivo, "%d\n", &novaReserva.matAluno) != 1)
        {
            break;
        }

        if (fscanf(arquivo, "%d\n", &novaReserva.matFunc) != 1)
        {
            break;
        }

        if (fscanf(arquivo, "%d\n", &novaReserva.numArmario) != 1)
        {
            break;
        }

        if (fscanf(arquivo, "%s\n", &novaReserva.dataRec) != 1)
        {
            break;
        }

        if (fscanf(arquivo, "%s\n", &novaReserva.dataDev) != 1)
        {
            break;
        }

        // Adicionar a nova reserva ao array
        reservasCadastradas[totalReservas] = novaReserva;
        totalReservas++;
    }

    fclose(arquivo);

    cout << "Reservas carregadas de 'reservas.txt' com sucesso!" << endl;
}

void visualizarReservas()
{
    carregarReservas();
    system("cls");
    gotoxy(1, 1);
    cout << "--------------------------------------------------------------------------------------------------------------------";
    gotoxy(1, 2);
    cout << "============================================ RESERVAS CADASTRADAS ==================================================";
    gotoxy(1, 3);
    cout << "--------------------------------------------------------------------------------------------------------------------";
    gotoxy(7, 4);
    cout << "Código";
    gotoxy(22, 4);
    cout << "Mat. Aluno";
    gotoxy(42, 4);
    cout << "Mat. Func";
    gotoxy(62, 4);
    cout << "Num. Armário";
    gotoxy(82, 4);
    cout << "Dt. Recebimento";
    gotoxy(100, 4);
    cout << "Dt. Devolução";
    cout << "\n";
    cout << "---------------------------------------------------------------------------------------------------------------------";

    for (int i = 0; i < totalReservas; i++)
    {
        gotoxy(6, 6 + i);
        printf("%d", reservasCadastradas[i].codigo);
        gotoxy(25, 6 + i);
        printf("%d", reservasCadastradas[i].matAluno);
        gotoxy(45, 6 + i);
        printf("%d", reservasCadastradas[i].matFunc);
        gotoxy(65, 6 + i);
        printf("%d", reservasCadastradas[i].numArmario);
        gotoxy(82, 6 + i);
        printf("%s", reservasCadastradas[i].dataRec);
        gotoxy(98, 6 + i);
        printf("%s", reservasCadastradas[i].dataDev);

    }
    cout << "\n";
    cout << "=====================================================================================================================\n";
    system("pause");
}

void editarReserva() {
    system("cls");

    int codigoReserva;
    cout << "Informe o codigo da reserva que deseja editar: ";
    cin >> codigoReserva;

    bool encontrou = false;
    for (int i = 0; i < totalReservas; i++) {
        if (reservasCadastradas[i].codigo == codigoReserva) {
            encontrou = true;

            // Encontrou a reserva, agora permita a edição das datas
            cout << "Reserva encontrada para o aluno de matricula: " << reservasCadastradas[i].matAluno << endl;

            cout << "Data de Recebimento atual: " << reservasCadastradas[i].dataRec << endl;
            cout << "Informe a nova data de recebimento (dd/MM/AAAA): ";
            cin >> reservasCadastradas[i].dataRec;

            cout << "Data de Devolucao atual: " << reservasCadastradas[i].dataDev << endl;
            cout << "Informe a nova data de devolucao (dd/MM/AAAA): ";
            cin >> reservasCadastradas[i].dataDev;

            cout << "Datas da reserva atualizadas com sucesso!" << endl;
            salvarReservas();

            break;
        }
    }

    if (!encontrou) {
        cout << "Reserva nao encontrada com o codigo informado." << endl;
    }

    system("pause");
}


void gerarTermoCompromisso() {
    system("cls");

    int matriculaAluno;
    cout << "Informe a matricula do aluno para gerar o Termo de Compromisso: ";
    cin >> matriculaAluno;

    bool encontrou = false;
    for (int i = 0; i < totalReservas; i++) {
        if (reservasCadastradas[i].matAluno == matriculaAluno) {
            encontrou = true;

            // Encontrou a reserva do aluno, agora procure as informações do aluno
            int indiceAluno = -1;
            for (int j = 0; j < totalAlunos; j++) {
                if (alunosCadastrados[j].matricula == matriculaAluno) {
                    indiceAluno = j;
                    break;
                }
            }

            if (indiceAluno != -1) {
                system("cls");
                gotoxy(10, 5);
                cout << "--- TERMO DE COMPROMISSO ---";
                gotoxy(10, 7);
                cout << "Eu, " << alunosCadastrados[indiceAluno].nome << ", aluno da matrícula " << matriculaAluno << ",";
                gotoxy(10, 8);
                cout << "comprometo-me a fazer o uso responsável do armário escolar número " << reservasCadastradas[i].numArmario << ".";
                gotoxy(10, 9);
                cout << "Declaro que recebi o armário em " << reservasCadastradas[i].dataRec << " e me comprometo a devolvê-lo até " << reservasCadastradas[i].dataDev << ".";
                gotoxy(10, 10);
                cout << "Caso haja danos ao armário, me responsabilizo por arcar com os custos de reparo ou substituição.";
                gotoxy(10, 11);
                cout << "Assinatura: ____________________";
                gotoxy(10, 12);
                cout << "Data: ____/____/____\n\n\n\n\n";
            } else {
                cout << "Aluno não encontrado." << endl;
            }
        }
    }

    if (!encontrou) {
        cout << "Reserva não encontrada para a matrícula informada." << endl;
    }

    system("pause");
}


//ARMARIOS
//ARMARIOS
//ARMARIOS
//ARMARIOS
//ARMARIOS
//ARMARIOS


void salvarArmarios()
{
    FILE *arquivo;
    arquivo = fopen("armarios.txt", "w");

    if (arquivo == NULL)
    {
        cout << "Erro ao abrir o arquivo!" << endl;
        return;
    }

    for (int i = 0; i < ARMARIO; i++)
    {
        fprintf(arquivo, "%d\n%d\n%d\n",
                armariosCadastrados[i].numero,
                armariosCadastrados[i].disponivel ? 1 : 0, // Converte bool para 1 (true) ou 0 (false)
                armariosCadastrados[i].estado ? 1 : 0);
    }

    fclose(arquivo);

}

void carregarArmarios()
{
    FILE *arquivo;
    arquivo = fopen("armarios.txt", "r");

    if (arquivo == NULL)
    {
        cout << "Arquivo 'armarios.txt' nao encontrado!" << endl;
        return;
    }

    // Limpa a array de armários antes de carregar
    totalArmarios = 0;

    while (!feof(arquivo))
    {
        Armario novoArmario;

        if (fscanf(arquivo, "%d\n", &novoArmario.numero) != 1)
        {
            break;
        }

        int disponivel, estado;
        if (fscanf(arquivo, "%d\n", &disponivel) != 1)
        {
            break;
        }
        novoArmario.disponivel = (disponivel == 1); // Converte 1 para true, 0 para false

        if (fscanf(arquivo, "%d\n", &estado) != 1)
        {
            break;
        }
        novoArmario.estado = (estado == 1); // Converte 1 para true, 0 para false

        // Adiciona o novo armário à array
        armariosCadastrados[totalArmarios] = novoArmario;
        totalArmarios++;
    }

    fclose(arquivo);

    cout << "Estados dos armarios carregados de 'armarios.txt' com sucesso!" << endl;
}

void inicializarArmarios()
{
    FILE* arquivo = fopen("armarios.txt", "r");

    if (arquivo == NULL)
    {
        // Arquivo não existe, então inicialize os armários
        for (int i = 0; i < ARMARIO; i++)
        {
            armariosCadastrados[i].numero = i + 1; // Número do armário
            armariosCadastrados[i].disponivel = true; // Armário inicialmente disponível
            armariosCadastrados[i].estado = true; // Estado inicial do armário
        }

        // Salve as informações dos armários em um arquivo
        salvarArmarios();
    }
    else
    {
        // Arquivo existe, então carregue as informações dos armários
        for (int i = 0; i < ARMARIO; i++)
        {
            if (fscanf(arquivo, "%d %d %d\n",
                       &armariosCadastrados[i].numero,
                       &armariosCadastrados[i].disponivel,
                       &armariosCadastrados[i].estado) == EOF)
            {
                break;
            }
        }
        fclose(arquivo);
    }
}

void exibirTodosArmarios()
{
    carregarArmarios(); // AGUARDANDO IMPLEMENTAÇÃO DE SALVAR ARMARIOS EM ARQUIVO
    system("cls");
    gotoxy(1, 1);
    cout << "-------------------------------------------------------";
    gotoxy(1, 2);
    cout << "=========================ARMARIOS======================";
    gotoxy(1, 3);
    cout << "-------------------------------------------------------";
    gotoxy(3, 4);
    cout << "Numero";
    gotoxy(20, 4);
    cout << "Estado";
    gotoxy(40, 4);
    cout << "Disponibilidade";
    cout << "\n";
    cout << "--------------------------------------------------------";

    for (int i = 0; i < ARMARIO; i++)
    {
        gotoxy(3, 6 + i);
        printf("%d", armariosCadastrados[i].numero);
        gotoxy(20, 6 + i);
        printf("%s", armariosCadastrados[i].estado ? "Bom" : "Quebrado");
        gotoxy(40, 6 + i);
        printf("%s", armariosCadastrados[i].disponivel ? "Disponível" : "Não Disponível");
    }
    cout << "\n";
    cout << "========================================================\n";
    system("pause");
}

int encontrarArmarioDisponivel()
{
    for (int i = 0; i < totalArmarios; i++)
    {
        if (armariosCadastrados[i].disponivel)
        {
            armariosCadastrados[i].disponivel = false; // Marcar o armário como indisponível
            salvarArmarios();
            return armariosCadastrados[i].numero;
        }
    }
    return -1; // Retorna -1 se nenhum armário estiver disponível
}

void editarArmario() {
    system("cls");

    int numeroArmario;
    cout << "Informe o numero do armario que deseja editar: ";
    cin >> numeroArmario;

    bool encontrado = false;
    for (int i = 0; i < totalArmarios; i++) {
        if (armariosCadastrados[i].numero == numeroArmario) {
            encontrado = true;

            cout << "Armario Numero: " << armariosCadastrados[i].numero << endl;
            cout << "Estado Atual: " << (armariosCadastrados[i].estado ? "Bom" : "Quebrado") << endl;
            cout << "Disponibilidade Atual: " << (armariosCadastrados[i].disponivel ? "Disponivel" : "Indisponivel") << endl;

            char escolha;
            cout << "Escolha o que deseja editar (D para disponibilidade, E para estado): ";
            cin >> escolha;

            if (escolha == 'D' || escolha == 'd') {
                // Editar a disponibilidade do armário
                cout << "Nova Disponibilidade (1 para Disponivel, 0 para Indisponivel): ";
                cin >> armariosCadastrados[i].disponivel;
                cout << "Disponibilidade editada com sucesso!" << endl;

                // Se a disponibilidade for alterada para 1 (Disponível)
                if (armariosCadastrados[i].disponivel) {
                        if (totalAlunoFila > 0) {
                    armariosCadastrados[i].disponivel = false;
                }
                    // Verifique se há uma reserva associada a este armário
                    for (int j = 0; j < totalReservas; j++) {
                        if (reservasCadastradas[j].numArmario == numeroArmario) {
                            // Verifique se há alunos na fila de espera
                            if (totalAlunoFila == 0) {
                                // Remova a reserva, pois o armário está disponível
                                for (int k = j; k < totalReservas - 1; k++) {
                                    reservasCadastradas[k] = reservasCadastradas[k + 1];
                                }
                                totalReservas--;
                            } else {
                                // Altere a matrícula e as datas para "a definir"
                                reservasCadastradas[j].matAluno = alunoFila[0].matricula;
                                strcpy(reservasCadastradas[j].dataRec, "definir");
                                strcpy(reservasCadastradas[j].dataDev, "definir");

                                // Remova o aluno da fila de espera
                                for (int k = 0; k < totalAlunoFila - 1; k++) {
                                    alunoFila[k] = alunoFila[k + 1];
                                }
                                totalAlunoFila--;
                            }
                        }
                    }
                    salvarAlunosFila();
                    salvarReservas();
                }
            } else if (escolha == 'E' || escolha == 'e') {
                // Editar o estado do armário
                cout << "Novo Estado (1 para Bom, 0 para Quebrado): ";
                cin >> armariosCadastrados[i].estado;
                cout << "Estado editado com sucesso!" << endl;
            } else {
                cout << "Escolha invalida!" << endl;
            }

            break;
        }
    }

    if (!encontrado) {
        cout << "Armario nao encontrado." << endl;
    }

    system("pause");
    salvarArmarios();
}



//ALUNOS
//ALUNOS
//ALUNOS
//ALUNOS
//ALUNOS


void carregarAlunosFila()
{
    FILE *arquivo;
    arquivo = fopen("alunosfila.txt", "r");

    if (arquivo == NULL)
    {
        cout << "Arquivo 'alunosfila.txt' nao encontrado!" << endl;
        return;
    }

    totalAlunoFila = 0;

    while (!feof(arquivo))
    {
        Aluno novoAluno;

        if (fscanf(arquivo, "%d\n", &novoAluno.matricula) != 1)
        {
            break;
        }

        fgets(novoAluno.nome, sizeof(novoAluno.nome), arquivo);
        fgets(novoAluno.email, sizeof(novoAluno.email), arquivo);
        fgets(novoAluno.fone, sizeof(novoAluno.fone), arquivo);
        fgets(novoAluno.turmaSerie, sizeof(novoAluno.turmaSerie), arquivo);

        // Remova a quebra de linha final, se presente
        novoAluno.nome[strcspn(novoAluno.nome, "\n")] = '\0';
        novoAluno.email[strcspn(novoAluno.email, "\n")] = '\0';
        novoAluno.fone[strcspn(novoAluno.fone, "\n")] = '\0';
        novoAluno.turmaSerie[strcspn(novoAluno.turmaSerie, "\n")] = '\0';

        // Adiciona o novo aluno ao array
        alunoFila[totalAlunoFila] = novoAluno;
        totalAlunoFila++;
    }

    fclose(arquivo);

}

void salvarAlunos()
{
    FILE *arquivo;
    arquivo = fopen("alunos.txt", "w");

    if (arquivo == NULL)
    {
        cout << "Erro ao abrir o arquivo!" << endl;
        return;
    }

    for (int i = 0; i < totalAlunos; i++)
    {
        fprintf(arquivo, "%d\n%s\n%s\n%s\n%s\n",
                alunosCadastrados[i].matricula,
                alunosCadastrados[i].nome,
                alunosCadastrados[i].email,
                alunosCadastrados[i].fone,
                alunosCadastrados[i].turmaSerie);
    }

    fclose(arquivo);

}

void carregarAlunos()
{
    FILE *arquivo;
    arquivo = fopen("alunos.txt", "r");

    if (arquivo == NULL)
    {
        cout << "Arquivo 'alunos.txt' nao encontrado!" << endl;
        return;
    }

    // Limpa o array de alunos antes de carregar
    totalAlunos = 0;

    while (!feof(arquivo))
    {
        Aluno novoAluno;

        if (fscanf(arquivo, "%d\n", &novoAluno.matricula) != 1)
        {
            break;
        }

        fgets(novoAluno.nome, sizeof(novoAluno.nome), arquivo);
        fgets(novoAluno.email, sizeof(novoAluno.email), arquivo);
        fgets(novoAluno.fone, sizeof(novoAluno.fone), arquivo);
        fgets(novoAluno.turmaSerie, sizeof(novoAluno.turmaSerie), arquivo);

        // Remova a quebra de linha final, se presente
        novoAluno.nome[strcspn(novoAluno.nome, "\n")] = '\0';
        novoAluno.email[strcspn(novoAluno.email, "\n")] = '\0';
        novoAluno.fone[strcspn(novoAluno.fone, "\n")] = '\0';
        novoAluno.turmaSerie[strcspn(novoAluno.turmaSerie, "\n")] = '\0';

        // Adiciona o novo aluno ao array
        alunosCadastrados[totalAlunos] = novoAluno;
        totalAlunos++;
    }

    fclose(arquivo);

    cout << "Alunos carregados de 'alunos.txt' com sucesso!" << endl;
}

void cadastrarAluno()
{
    system("cls");

    Aluno novoAluno;

    while (true)
    {
        cout << "Informe a matricula do aluno: ";
        cin >> novoAluno.matricula;

        bool matriculaExistente = false;
        for (int i = 0; i < totalAlunos; i++)
        {
            if (alunosCadastrados[i].matricula == novoAluno.matricula)
            {
                matriculaExistente = true;
                cout << "Erro: Matricula ja existe! Tente novamente." << endl;
                break;
            }
        }

        if (!matriculaExistente)
        {
            break;
        }
    }

    cout << "Informe o nome do aluno: ";
    cin.ignore();
    cin.getline(novoAluno.nome, 50);

    cout << "Informe o email do aluno: ";
    cin.getline(novoAluno.email, 50);

    cout << "Informe o telefone do aluno: ";
    cin.getline(novoAluno.fone, 15);

    cout << "Informe a turma do aluno: ";
    cin.getline(novoAluno.turmaSerie, 20);


    alunosCadastrados[totalAlunos] = novoAluno;
    totalAlunos++;

    cout << "Aluno cadastrado com sucesso!" << endl;

    int numArmario = encontrarArmarioDisponivel();

    if (numArmario != -1)
    {
        Reserva novaReserva;
        novaReserva.codigo = totalReservas;
        novaReserva.matAluno = novoAluno.matricula;

        novaReserva.matFunc = matriculaFuncionarioLogado;

        novaReserva.numArmario = numArmario;

        cout << "\ninforme a data de recebimento do armario(dd/MM/AAA): ";
        cin >> novaReserva.dataRec;
        cout << "\ninforme a data de devolucao do armario(dd/MM/AAA): ";
        cin >> novaReserva.dataDev;


        reservasCadastradas[totalReservas] = novaReserva;
        totalReservas++;

        cout << "Reserva criada com sucesso!" << endl;
        salvarReservas();
    }
    else
    {
        cout << "Nenhum armario disponivel para criar reserva." << endl;

        if (totalAlunoFila < FILA)
        {
            alunoFila[totalAlunoFila] = novoAluno;
            totalAlunoFila++;
            cout << "Aluno adicionado a fila de espera." << endl;
            salvarAlunosFila();
        }
        else
        {
            cout << "Limite de alunos na fila atingido. Impossivel adicionar mais alunos." << endl;
        }
    }

    system("pause");
    salvarAlunos();
}

void atualizarAluno()
{
    system("cls"); // Limpa a tela

    int matricula;
    cout << "Informe a matricula do aluno que deseja atualizar: ";
    cin >> matricula;

    bool encontrado = false;
    for (int i = 0; i < totalAlunos; i++)
    {
        if (alunosCadastrados[i].matricula == matricula)
        {
            encontrado = true;

            // Exibe os detalhes do aluno escolhido
            cout << "Aluno escolhido:" << endl;
            cout << "Matricula: " << alunosCadastrados[i].matricula << endl;
            cout << "Nome: " << alunosCadastrados[i].nome << endl;
            cout << "Email: " << alunosCadastrados[i].email << endl;
            cout << "Telefone: " << alunosCadastrados[i].fone << endl;
            cout << "Turma: " << alunosCadastrados[i].turmaSerie << endl;

            cout << "Escolha o que deseja atualizar:" << endl;
            cout << "1. Nome" << endl;
            cout << "2. Email" << endl;
            cout << "3. Telefone" << endl;
            cout << "4. Turma" << endl;
            cout << "5. Voltar" << endl;
            cout << "Opcao: ";

            int opcao;
            cin >> opcao;

            switch (opcao)
            {
            case 1:
                cout << "Informe o novo nome: ";
                cin.ignore();
                cin.getline(alunosCadastrados[i].nome, 50);
                cout << "Nome atualizado com sucesso!" << endl;
                break;
            case 2:
                cout << "Informe o novo email: ";
                cin.ignore();
                cin.getline(alunosCadastrados[i].email, 50);
                cout << "Email atualizado com sucesso!" << endl;
                break;
            case 3:
                cout << "Informe o novo telefone: ";
                cin.ignore();
                cin.getline(alunosCadastrados[i].fone, 15);
                cout << "Telefone atualizado com sucesso!" << endl;
                break;
            case 4:
                cout << "Informe a nova turma: ";
                cin.ignore();
                cin.getline(alunosCadastrados[i].turmaSerie, 20);
                cout << "Turma atualizada com sucesso!" << endl;
                break;
            case 5:
                return; // Voltar ao menu anterior
            default:
                cout << "Opcao invalida!" << endl;
                break;
            }
        }
    }

    if (!encontrado)
    {
        cout << "Aluno nao encontrado!" << endl;
    }

    system("pause"); // Aguarda até que o usuário pressione uma tecla para continuar
    salvarAlunos();
}

void deletAluno() {
    system("cls");

    int matriculaAluno;
    cout << "Informe a matricula do aluno que deseja excluir: ";
    cin >> matriculaAluno;

    bool encontrou = false;
    for (int i = 0; i < totalAlunos; i++) {
        if (alunosCadastrados[i].matricula == matriculaAluno) {
            encontrou = true;

            // Verifica se a matricula do aluno está em alguma reserva
            for (int j = 0; j < totalReservas; j++) {
                if (reservasCadastradas[j].matAluno == matriculaAluno) {
                    // Torna o armário associado à reserva disponível novamente
                    int numArmario = reservasCadastradas[j].numArmario;
                    for (int k = 0; k < totalArmarios; k++) {
                        if (armariosCadastrados[k].numero == numArmario) {
                            armariosCadastrados[k].disponivel = true;
                            break;
                        }
                    }

                    // Exclui a reserva associada a esse aluno
                    for (int k = j; k < totalReservas - 1; k++) {
                        reservasCadastradas[k] = reservasCadastradas[k + 1];
                    }
                    totalReservas--;

                    salvarArmarios();
                    salvarReservas();
                    break;
                }
            }

            // Verifica se há alunos na fila de espera
            if (totalAlunoFila > 0) {
                // Aloca o armário para o próximo aluno na fila
                int numArmario = encontrarArmarioDisponivel();
                if (numArmario != -1) {
                    Reserva novaReserva;
                    novaReserva.codigo = totalReservas;
                    novaReserva.matAluno = alunoFila[0].matricula;
                    novaReserva.matFunc = matriculaFuncionarioLogado; // Use a matrícula do funcionário logado
                    novaReserva.numArmario = numArmario;
                    strcpy(novaReserva.dataRec, "definir");
                    strcpy(novaReserva.dataDev, "definir");

                    reservasCadastradas[totalReservas] = novaReserva;
                    totalReservas++;

                    // Remove o primeiro aluno da fila de espera
                    for (int k = 0; k < totalAlunoFila - 1; k++) {
                        alunoFila[k] = alunoFila[k + 1];
                    }
                    totalAlunoFila--;

                    salvarArmarios();
                    salvarReservas();
                    salvarAlunosFila();
                }
            }

            // Exclui o aluno
            for (int k = i; k < totalAlunos - 1; k++) {
                alunosCadastrados[k] = alunosCadastrados[k + 1];
            }
            totalAlunos--;

            cout << "Aluno excluído com sucesso!" << endl;
            salvarAlunos();

            break;
        }
    }

    if (!encontrou) {
        cout << "Aluno não encontrado com a matrícula informada." << endl;
    }

    system("pause");
}



void exibirTodosAlunos()
{
    carregarAlunos();
    system("cls");
    gotoxy(1, 1);
    cout << "--------------------------------------------------------------------------------------------------------------------";
    gotoxy(1, 2);
    cout << "=============================================ALUNOS=================================================================";
    gotoxy(1, 3);
    cout << "--------------------------------------------------------------------------------------------------------------------";
    gotoxy(7, 4);
    cout << "Nome";
    gotoxy(30, 4);
    cout << "Email";
    gotoxy(65, 4);
    cout << "Matricula";
    gotoxy(85, 4);
    cout << "Contato";
    gotoxy(105, 4);
    cout << "Turma/Serie";
    cout << "\n";
    cout << "---------------------------------------------------------------------------------------------------------------------";

    for (int i = 0; i < totalAlunos; i++)
    {
        gotoxy(6, 6 + i);
        printf("%s", alunosCadastrados[i].nome);
        gotoxy(28, 6 + i);
        printf("%s", alunosCadastrados[i].email);
        gotoxy(66, 6 + i);
        printf("%d", alunosCadastrados[i].matricula);
        gotoxy(86, 6 + i);
        printf("%s", alunosCadastrados[i].fone);
        gotoxy(105, 6 + i);
        printf("%s", alunosCadastrados[i].turmaSerie);

    }
    cout << "\n";
    cout << "=====================================================================================================================\n";
    system("pause");
}


//FUNCIONARIOS
//FUNCIONARIOS
//FUNCIONARIOS
//FUNCIONARIOS



void salvarFuncionarios()
{
    FILE *arquivo;
    arquivo = fopen("funcionarios.txt", "w");

    if (arquivo == NULL)
    {
        cout << "Erro ao abrir o arquivo!" << endl;
        return;
    }

    for (int i = 0; i < totalFuncionarios; i++)
    {
        fprintf(arquivo, "%d\n%s\n%s\n%s\n%s\n%s\n",
                funcionariosCadastrados[i].matricula,
                funcionariosCadastrados[i].nome,
                funcionariosCadastrados[i].usuario,
                funcionariosCadastrados[i].senha,
                funcionariosCadastrados[i].email,
                funcionariosCadastrados[i].fone);
    }

    fclose(arquivo);

    cout << "Funcionarios salvos em 'funcionarios.txt' com sucesso!" << endl;
}


void carregarFuncionarios()
{
    FILE *arquivo;
    arquivo = fopen("funcionarios.txt", "r");

    if (arquivo == NULL)
    {
        cout << "Arquivo 'funcionarios.txt' nao encontrado!" << endl;
        return;
    }

    // Limpa o array de funcionários antes de carregar
    totalFuncionarios = 0;

    while (!feof(arquivo))
    {
        Funcionario novoFuncionario;

        if (fscanf(arquivo, "%d\n", &novoFuncionario.matricula) != 1)
        {
            break;
        }

        fgets(novoFuncionario.nome, sizeof(novoFuncionario.nome), arquivo);
        fgets(novoFuncionario.usuario, sizeof(novoFuncionario.usuario), arquivo);
        fgets(novoFuncionario.senha, sizeof(novoFuncionario.senha), arquivo);
        fgets(novoFuncionario.email, sizeof(novoFuncionario.email), arquivo);
        fgets(novoFuncionario.fone, sizeof(novoFuncionario.fone), arquivo);

        // Remova a quebra de linha final, se presente
        novoFuncionario.nome[strcspn(novoFuncionario.nome, "\n")] = '\0';
        novoFuncionario.usuario[strcspn(novoFuncionario.usuario, "\n")] = '\0';
        novoFuncionario.senha[strcspn(novoFuncionario.senha, "\n")] = '\0';
        novoFuncionario.email[strcspn(novoFuncionario.email, "\n")] = '\0';
        novoFuncionario.fone[strcspn(novoFuncionario.fone, "\n")] = '\0';

        // Adiciona o novo funcionário ao array
        funcionariosCadastrados[totalFuncionarios] = novoFuncionario;
        totalFuncionarios++;
    }

    fclose(arquivo);

    cout << "Funcionarios carregados de 'funcionarios.txt' com sucesso!" << endl;
}

void cadastrarFuncionario()
{
    system("cls"); // Limpa a tela

    Funcionario novoFuncionario;

    while (true)
    {
        cout << "Informe a matricula do funcionario: ";
        cin >> novoFuncionario.matricula;

        // Verifica se a matrícula já existe
        bool matriculaExistente = false;
        for (int i = 0; i < totalFuncionarios; i++)
        {
            if (funcionariosCadastrados[i].matricula == novoFuncionario.matricula)
            {
                matriculaExistente = true;
                cout << "Erro: Matricula ja existe! Tente novamente." << endl;
                break;
            }
        }

        if (!matriculaExistente)
        {
            break; // Matrícula única, sai do loop
        }
    }

    cout << "Informe o nome do funcionario: ";
    cin.ignore();
    cin.getline(novoFuncionario.nome, 50);

    cout << "Informe o usuario do funcionario: ";
    cin.getline(novoFuncionario.usuario, 20);

    cout << "Informe a senha do funcionario: ";
    cin.getline(novoFuncionario.senha, 20);

    cout << "Informe o email do funcionario: ";
    cin.getline(novoFuncionario.email, 50);

    cout << "Informe o telefone do funcionario: ";
    cin.getline(novoFuncionario.fone, 15);

    // Adiciona o novo funcionário ao array
    funcionariosCadastrados[totalFuncionarios] = novoFuncionario;
    totalFuncionarios++;

    cout << "Funcionario cadastrado com sucesso!" << endl;
    system("pause");
    salvarFuncionarios();
}


void exibirTodosFuncionario()
{
    carregarFuncionarios();
    system("cls");
    gotoxy(1, 1);
    cout << "---------------------------------------------------------------------------------------------------------------";
    gotoxy(1, 2);
    cout << "================================================FUNCIONARIO====================================================";
    gotoxy(1, 3);
    cout << "---------------------------------------------------------------------------------------------------------------";
    gotoxy(7, 4);
    cout << "Nome";
    gotoxy(45, 4);
    cout << "Email";
    gotoxy(65, 4);
    cout << "Matricula";
    gotoxy(85, 4);
    cout << "Contato";
    gotoxy(105, 4);
    cout << "Usuario";
    gotoxy(1, 5);
    cout << "---------------------------------------------------------------------------------------------------------------";

    for (int i = 0; i < totalFuncionarios; i++)
    {
        gotoxy(6, 6 + i);
        printf("%s", funcionariosCadastrados[i].nome);
        gotoxy(36, 6 + i);
        printf("%s", funcionariosCadastrados[i].email);
        gotoxy(66, 6 + i);
        printf("%d", funcionariosCadastrados[i].matricula);
        gotoxy(86, 6 + i);
        printf("%s", funcionariosCadastrados[i].fone);
        gotoxy(106, 6 + i);
        printf("%s", funcionariosCadastrados[i].usuario);

    }
    cout << "\n";
    cout << "================================================================================================================\n";
    system("pause");
}


void atualizarFuncionario()
{
    system("cls");
    int matricula;
    cout << "Informe a matricula do funcionario que deseja atualizar: ";
    cin >> matricula;

    bool encontrado = false;
    for (int i = 0; i < totalFuncionarios; i++)
    {
        if (funcionariosCadastrados[i].matricula == matricula)
        {
            encontrado = true;

            // Exibe os detalhes do funcionário escolhido
            cout << "Funcionario escolhido:" << endl;
            cout << "Matricula: " << funcionariosCadastrados[i].matricula << endl;
            cout << "Nome: " << funcionariosCadastrados[i].nome << endl;
            cout << "Usuario: " << funcionariosCadastrados[i].usuario << endl;
            cout << "Senha: " << funcionariosCadastrados[i].senha << endl;
            cout << "Email: " << funcionariosCadastrados[i].email << endl;
            cout << "Telefone: " << funcionariosCadastrados[i].fone << endl;

            cout << "Escolha o que deseja atualizar:" << endl;
            cout << "1. Nome" << endl;
            cout << "2. Usuario" << endl;
            cout << "3. Senha" << endl;
            cout << "4. Email" << endl;
            cout << "5. Telefone" << endl;
            cout << "6. Voltar" << endl;
            cout << "Opcao: ";

            int opcao;
            cin >> opcao;

            switch (opcao)
            {
            case 1:
                cout << "Informe o novo nome: ";
                cin.ignore();
                cin.getline(funcionariosCadastrados[i].nome, 50);
                cout << "Nome atualizado com sucesso!" << endl;
                break;
            case 2:
                cout << "Informe o novo usuario: ";
                cin.ignore();
                cin.getline(funcionariosCadastrados[i].usuario, 20);
                cout << "Usuario atualizado com sucesso!" << endl;
                break;
            case 3:
                cout << "Informe a nova senha: ";
                cin.ignore();
                cin.getline(funcionariosCadastrados[i].senha, 20);
                cout << "Senha atualizada com sucesso!" << endl;
                break;
            case 4:
                cout << "Informe o novo email: ";
                cin.ignore();
                cin.getline(funcionariosCadastrados[i].email, 50);
                cout << "Email atualizado com sucesso!" << endl;
                break;
            case 5:
                cout << "Informe o novo telefone: ";
                cin.ignore();
                cin.getline(funcionariosCadastrados[i].fone, 15);
                cout << "Telefone atualizado com sucesso!" << endl;
                break;
            case 6:
                return; // Voltar ao menu anterior
            default:
                cout << "Opcao invalida!" << endl;
                break;
            }
        }
    }

    if (!encontrado)
    {
        cout << "Funcionario nao encontrado!" << endl;
    }
    salvarFuncionarios();
}

void deletFuncionario()
{
    int funDel, novoTotalFuncionarios = 0;

    cout << "\n*********************  DELETAR CADASTRO DE FUNCIONÁRIO ************************ \n";
    cout << "Informe a matrícula do funcionário que deseja deletar.\n";
    cout << "\nMatrícula: ";
    cin >> funDel;

    // Criar um novo array temporário
    Funcionario novosFuncionariosCadastrados[FUNCIONARIO];
    for (int i = 0; i < totalFuncionarios; i++)
    {
        if (funDel != funcionariosCadastrados[i].matricula)
        {
            novosFuncionariosCadastrados[novoTotalFuncionarios] = funcionariosCadastrados[i];
            novoTotalFuncionarios++;
        }
    }
    if (novoTotalFuncionarios < totalFuncionarios)
    {
        totalFuncionarios = novoTotalFuncionarios;      // Exclusão bem-sucedida, atualizar o array principal
        for (int i = 0; i < totalFuncionarios; i++)
        {
            funcionariosCadastrados[i] = novosFuncionariosCadastrados[i];
        }
        system("cls");

        ////////////////////////////////////////////////////////salvarFuncionariosEmArquivo();

        cout << "\nCadastro deletado.\n";
        system("pause");
    }
    else
    {
        system("cls");
        cout << "\nFuncionário não encontrado para exclusão.\n";
        system("pause");
    }
    salvarFuncionarios();
}

//MENUS
//MENUS
//MENUS
//MENUS
//MENUS

void menuArmarios()
{
    char escolha;

    while (true)
    {
        system("cls"); // Limpa a tela

        gotoxy(10, 5);
        cout << "**********************************************" << endl;
        gotoxy(10, 6);
        cout << "*           MENU ARMARIOS                   *" << endl;
        gotoxy(10, 7);
        cout << "**********************************************" << endl;
        gotoxy(10, 9);
        cout << "1. Visualizar Armarios" << endl;
        gotoxy(10, 10);
        cout << "2. Editar Armarios" << endl;
        gotoxy(10, 11);
        cout << "3. Voltar" << endl;

        gotoxy(10, 13);
        cout << "Escolha uma opcao: ";
        cin >> escolha;

        switch (escolha)
        {
        case '1':
            exibirTodosArmarios();
            break;
        case '2':
            editarArmario();
            break;
        case '3':
            // Voltar ao menu anterior
            return;
        default:
            // Opção inválida
            gotoxy(10, 15);
            cout << "Opcao invalida! Pressione Enter para continuar...";
            cin.ignore();
            cin.get(); // Aguarda pressionar Enter para continuar
            break;
        }
    }
}

void mostrarSubMenuAlunos()
{
    char escolha;

    while (true)
    {
        system("cls"); // Limpa a tela

        gotoxy(10, 5);
        cout << "**********************************************" << endl;
        gotoxy(10, 6);
        cout << "*           MENU ALUNOS                     *" << endl;
        gotoxy(10, 7);
        cout << "**********************************************" << endl;
        gotoxy(10, 9);
        cout << "1. Cadastrar Aluno" << endl;
        gotoxy(10, 10);
        cout << "2. Listar Alunos" << endl;
        gotoxy(10, 11);
        cout << "3. Atualizar Aluno" << endl;
        gotoxy(10, 12);
        cout << "4. Excluir Aluno" << endl;
        gotoxy(10, 13);
        cout << "5. Voltar" << endl;

        gotoxy(10, 15);
        cout << "Escolha uma opcao: ";
        cin >> escolha;

        switch (escolha)
        {
        case '1':
            cadastrarAluno();
            break;
        case '2':
            exibirTodosAlunos();
            break;
        case '3':
            atualizarAluno();
            break;
        case '4':
            deletAluno();
            break;
        case '5':
            // Voltar ao menu anterior
            return;
        default:
            // Opção inválida
            gotoxy(10, 17);
            cout << "Opcao invalida! Pressione Enter para continuar...";
            cin.ignore();
            cin.get(); // Aguarda pressionar Enter para continuar
            break;
        }
    }
}

void mostrarSubMenuFuncionarios()
{
    char escolha;

    while (true)
    {
        system("cls"); // Limpa a tela

        gotoxy(10, 5);
        cout << "**********************************************" << endl;
        gotoxy(10, 6);
        cout << "*            MENU FUNCIONARIOS               *" << endl;
        gotoxy(10, 7);
        cout << "**********************************************" << endl;
        gotoxy(10, 9);
        cout << "1. Cadastrar Funcionario" << endl;
        gotoxy(10, 10);
        cout << "2. Listar Funcionarios" << endl;
        gotoxy(10, 11);
        cout << "3. Atualizar Funcionario" << endl;
        gotoxy(10, 12);
        cout << "4. Excluir Funcionario" << endl;
        gotoxy(10, 13);
        cout << "5. Voltar" << endl;

        gotoxy(10, 15);
        cout << "Escolha uma opcao: ";
        cin >> escolha;

        switch (escolha)
        {
        case '1':
            cadastrarFuncionario();
            break;
        case '2':
            exibirTodosFuncionario();
            break;
        case '3':
            atualizarFuncionario();
            break;
        case '4':
            deletFuncionario();
            break;
        case '5':
            // Voltar ao menu anterior
            return;
        default:
            // Opção inválida
            gotoxy(10, 17);
            cout << "Opcao invalida! Pressione Enter para continuar...";
            cin.ignore();
            cin.get(); // Aguarda pressionar Enter para continuar
            break;
        }
    }
}

void menuReservas()
{
    char escolha;

    while (true)
    {
        system("cls"); // Limpa a tela

        gotoxy(10, 5);
        cout << "**********************************************" << endl;
        gotoxy(10, 6);
        cout << "*                MENU RESERVAS               *" << endl;
        gotoxy(10, 7);
        cout << "**********************************************" << endl;
        gotoxy(10, 9);
        cout << "1. Visualizar Reservas" << endl;
        gotoxy(10, 10);
        cout << "2. Fila de Reservas" << endl;
        gotoxy(10, 11);
        cout << "3. Gerar Termo de Compromisso" << endl;
        gotoxy(10, 12);
        cout << "4. Editar Reservas" << endl;
        gotoxy(10, 13);
        cout << "5. Voltar" << endl;


        gotoxy(10, 15);
        cout << "Escolha uma opcao: ";
        cin >> escolha;

        switch (escolha)
        {
        case '1':
            visualizarReservas();
            break;
        case '2':
            carregarAlunosFila();
    system("cls");
    gotoxy(1, 1);
    cout << "--------------------------------------------------------------------------------------------------------------------";
    gotoxy(1, 2);
    cout << "============================================ ALUNOS NA FILA ========================================================";
    gotoxy(1, 3);
    cout << "--------------------------------------------------------------------------------------------------------------------";
    gotoxy(7, 4);
    cout << "Nome";
    gotoxy(30, 4);
    cout << "Email";
    gotoxy(65, 4);
    cout << "Matricula";
    gotoxy(85, 4);
    cout << "Contato";
    gotoxy(105, 4);
    cout << "Turma/Serie";
    cout << "\n";
    cout << "---------------------------------------------------------------------------------------------------------------------";

    for (int i = 0; i < totalAlunoFila; i++)
    {
        gotoxy(6, 6 + i);
        printf("%s", alunoFila[i].nome);
        gotoxy(28, 6 + i);
        printf("%s", alunoFila[i].email);
        gotoxy(66, 6 + i);
        printf("%d", alunoFila[i].matricula);
        gotoxy(86, 6 + i);
        printf("%s", alunoFila[i].fone);
        gotoxy(105, 6 + i);
        printf("%s", alunoFila[i].turmaSerie);

    }
    cout << "\n";
    cout << "=====================================================================================================================\n";
    system("pause");
            break;
        case '3':
            gerarTermoCompromisso();
            break;
        case '4':
            editarReserva();
        case '5':
            return;
        default:
            // Opção inválida
            gotoxy(10, 17);
            cout << "Opcao invalida! Pressione Enter para continuar...";
            cin.ignore();
            cin.get(); // Aguarda pressionar Enter para continuar
            break;
        }
    }
}

void menuPrincipal()
{
    char escolha;

    while (true)
    {
        system("cls"); // Limpa a tela

        gotoxy(10, 5);
        cout << "**********************************************" << endl;
        gotoxy(10, 6);
        cout << "*            MENU PRINCIPAL                 *" << endl;
        gotoxy(10, 7);
        cout << "**********************************************" << endl;
        gotoxy(10, 9);
        cout << "1. Funcionarios" << endl;
        gotoxy(10, 10);
        cout << "2. Alunos" << endl;
        gotoxy(10, 11);
        cout << "3. Armarios" << endl;
        gotoxy(10, 12);
        cout << "4. Reserva" << endl;
        gotoxy(10, 13);
        cout << "5. Sair" << endl;

        gotoxy(10, 15);
        cout << "Escolha uma opcao: ";
        cin >> escolha;

        switch (escolha)
        {
        case '1':
            // Menu de funcionários
            mostrarSubMenuFuncionarios();
            break;
        case '2':
            // Menu de alunos
            mostrarSubMenuAlunos();
            break;
        case '3':
            menuArmarios();
            break;
        case '4':
            menuReservas();
            break;
        case '5':
            // Sair do programa
            return;
        default:
            // Opção inválida
            gotoxy(10, 17);
            cout << "Opcao invalida! Pressione Enter para continuar...";
            cin.ignore();
            cin.get(); // Aguarda pressionar Enter para continuar
            break;
        }
    }
}

void fazerLogin()
{
    string nomeUsuario, senha;

    cout << "Login\n\n";
    cout << "Nome de Usuário: ";
    cin >> nomeUsuario;
    cout << "Senha: ";
    cin >> senha;

    bool loginValido = false;


    for (int i = 0; i < totalFuncionarios; i++)
    {
        if (nomeUsuario == funcionariosCadastrados[i].usuario && senha == funcionariosCadastrados[i].senha)
        {
            loginValido = true;
            matriculaFuncionarioLogado = funcionariosCadastrados[i].matricula;
            cout << "Login bem-sucedido como " << funcionariosCadastrados[i].nome << endl;
            system("pause");
            system("cls");
            menuPrincipal();
            break;
        }
    }

    if (!loginValido)
    {
        cout << "Credenciais incorretas. Acesso negado!\n" << endl;
        system("pause");
        system("cls");
    }
}


int main()
{
    inicializarArmarios();
    carregarFuncionarios();
    carregarArmarios();
    carregarReservas();
    carregarAlunos();
    carregarAlunosFila();
    setlocale(LC_ALL,"Portuguese");
    system("cls");
    int opcao;
    do
    {
        cout << "Sistema de Consulta e Reserva de Armários\n\n";
        cout << "[1] Entrar\n";
        cout << "[2] Cadastrar\n";
        cout << "[3] Sair\n";
        cout << "Escolha uma opção: ";
        cin >> opcao;

        switch (opcao)
        {
        case 1:
        {
            system("cls");
            fazerLogin();
            break;
        }
        case 2:
            system("cls");
            cadastrarFuncionario();
            main();
            break;
        case 3:
            system("cls");
            cout << "Até logo.\n";
            break;
        default:
            system("cls");
            cout << "Opção inválida. Por favor, escolha novamente.\n" << endl;
            system("pause");
            system("cls");
            break;
        }
    }
    while(opcao!=3);

    return 0;
}
